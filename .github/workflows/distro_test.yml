---
name: distro_test
on:
  push:
    paths-ignore:
      - 'docs/**'
  pull_request:
  # Run the functional tests every 8 hours.
  # This will help to identify faster if
  # there is a CI failure related to a
  # change in any dependency.
  schedule:
    - cron: '0 */8 * * *'
jobs:
  build:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]
    steps:
      - name: Update package manager first, the runner could reference stale repos
        run: sudo apt-get update -y
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Reinstall podman with a newer version (breaking change from 3 to 4)
        run: |
          sudo apt remove podman -y
          sudo apt autoclean && sudo apt autoremove
          export DEBIAN_FRONTEND="noninteractive"
          echo "deb http://download.opensuse.org/repositories/home:/kubeinit/xUbuntu_20.04/ /" | sudo tee /etc/apt/sources.list.d/kubeinit.list
          curl -fsSL https://download.opensuse.org/repositories/home:kubeinit/xUbuntu_20.04/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/kubeinit.gpg > /dev/null
          sudo -E apt-get update
          sudo apt-get install -y crun podman catatonit
          sudo systemctl list-unit-files | grep podman
          sudo ln -s /usr/bin/catatonit /usr/libexec/podman/catatonit
      - name: Set DBUS_SESSION_BUS_ADDRESS and XDG_RUNTIME_DIR
        run: |
          sudo useradd -u 1537 kiuser
          locuser=$(whoami)
          # locuser='kiuser'
          loginctl enable-linger $locuser
          id=$(id -u $locuser)
          sudo mkdir -p /run/user/$id
          sudo chown -R $locuser /run/user/
          sudo systemctl start user@$id
          sudo -u $locuser DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$id/bus systemd-run --user --scope /bin/bash
          export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$id/bus
          export XDG_RUNTIME_DIR="/run/user/$id"
          echo DBUS_SESSION_BUS_ADDRESS="$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
          echo XDG_RUNTIME_DIR="$XDG_RUNTIME_DIR" >> $GITHUB_ENV
          systemctl --user daemon-reload
          systemctl --user enable podman
          systemctl --user start podman
          systemctl --user enable podman.socket
          systemctl --user start podman.socket
      - name: Get some debug information
        run: |
          podman --version
          podman info --debug
          CONTAINER_RUNTIME=$(podman system info --format=json | jq .host.ociRuntime.name)

          echo "-----------------------------------------------------------------"
          echo "| Make sure the container runtime is CRUN                       |"
          echo "| currently is: ${CONTAINER_RUNTIME}                                            |"
          echo "-----------------------------------------------------------------"

          if [[ $CONTAINER_RUNTIME == "crun" ]]; then
              echo "****** OK: The container runtime is crun ******"
          else
              echo "****** ERROR:FATAL: Container runtime must be crun ******"
          fi
      - name: Build kubeinit/kubeinit container
        run: |
         podman build -t kubeinit/kubeinit .
      - name: Setup ssh
        run: |
          ssh-keygen -t ed25519 -N "" -C "distro_test $(whoami)@$(hostname)" -f ~/.ssh/id_ed25519
          cat ~/.ssh/id_ed25519.pub | tee -a ~/.ssh/authorized_keys
          chmod 600 ~/.ssh/authorized_keys
      - name: Mimic behavior of using kubeinit/kubeinit container to perform kubeinit setup
        run: |
          podman secret create kubeinit-setup-ssh-key ~/.ssh/id_ed25519
          ssh-keygen -t ed25519 -N "" -C "kubeinit-setup $(whoami)@$(hostname)" -f ~/.ssh/kubeinit_id_ed25519
          cat ~/.ssh/kubeinit_id_ed25519.pub | tee -a ~/.ssh/authorized_keys
          sudo su <<EOF
            cat $HOME/.ssh/kubeinit_id_ed25519.pub | tee -a ~/.ssh/authorized_keys
          EOF
          echo "Host nyctea" > ~/.ssh/config
          echo "  Hostname $(hostname)" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/kubeinit_id_ed25519" >> ~/.ssh/config
          echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
          echo "  StrictHostKeyChecking accept-new" >> ~/.ssh/config
      - name: Run a deployment from the kubeinit/kubeinit container
        run: |
          podman secret create kubeinit-ssh-key ~/.ssh/kubeinit_id_ed25519
          podman run --rm --network host \
              --secret kubeinit-ssh-key \
              localhost/kubeinit/kubeinit:latest \
                  -vvvv \
                  --user root \
                  -e hypervisor_hosts_spec="[[host=hypervisor-01,ansible_host=nyctea,ssh_hostname=$(hostname)]]" \
                  -e kubeinit_spec=cdk-libvirt-1-0-1-c \
                  -e kubeinit_stop_after_task='task-prepare-cluster' \
                  -e kubeinit_libvirt_create_cloud_user=true \
                  -e kubeinit_hosted_deployment=true \
                  -e kubeinit_ignore_validation_checks=true \
                  -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR \
                  -e DBUS_SESSION_BUS_ADDRESS=$XDG_RUNTIME_DIR \
                  kubeinit/playbook.yml
