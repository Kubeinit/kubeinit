---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Deploy the cluster service node
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_libvirt"
    tasks_from: 60_okd_deploy_nodes.yml
    public: yes
  with_items:
    - "{{ groups['all_service_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"
    kubeinit_deployment_role: service

- name: Check that the service node is up and running
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_libvirt"
    tasks_from: 70_check_nodes_up.yml
    public: yes
  with_items:
    - "{{ groups['all_service_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"

- name: Upgrade packages and restart
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_okd"
    tasks_from: 00_bounce_packages.yml
    public: yes
  with_items:
    - "{{ groups['all_service_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"

- name: Check that the service node is up and running
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_libvirt"
    tasks_from: 70_check_nodes_up.yml
    public: yes
  with_items:
    - "{{ groups['all_service_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"

- name: Configure the cluster service node
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_okd"
    tasks_from: 10_configure_service_nodes.yml
    public: yes
  with_items:
    - "{{ groups['all_service_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"

- name: Deploy the cluster bootstrap nodes
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_libvirt"
    tasks_from: 60_okd_deploy_nodes.yml
    public: yes
  with_items:
    - "{{ groups['all_bootstrap_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"
    kubeinit_deployment_role: bootstrap

- name: Deploy the cluster master nodes
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_libvirt"
    tasks_from: 60_okd_deploy_nodes.yml
    public: yes
  with_items:
    - "{{ groups['all_master_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"
    kubeinit_deployment_role: master

- name: Configure the cluster master nodes
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_okd"
    tasks_from: 20_check_nodes_ready.yml
    public: yes
  # We always delegate this to the service node and
  # check the deployment_role variable
  with_items:
    - "{{ groups['all_service_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"
    kubeinit_deployment_role: master

- name: Wait until bootstrap completes
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_okd"
    tasks_from: 30_check_bootstrap_complete.yml
    public: yes
  with_items:
    - "{{ groups['all_service_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"

- name: Remove the bootstrap node in a multimaster deployment
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_okd"
    tasks_from: 40_remove_bootstrap_node.yml
    public: yes
  with_items:
    - "{{ groups['all_bootstrap_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"
  when: groups['all_master_nodes'] | length > 1

- name: Deploy the cluster worker nodes
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_libvirt"
    tasks_from: 60_okd_deploy_nodes.yml
    public: yes
  with_items:
    - "{{ groups['all_worker_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"
    kubeinit_deployment_role: worker

- name: Finish post deployment tasks
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_okd"
    tasks_from: 50_post_deployment_tasks.yml
    public: yes
  with_items:
    - "{{ groups['all_service_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"

- name: Remove the bootstrap node in a singlemaster deployment
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_okd"
    tasks_from: 40_remove_bootstrap_node.yml
    public: yes
  with_items:
    - "{{ groups['all_bootstrap_nodes'] | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item }}"
  when: groups['all_master_nodes'] | length == 1

- name: Deploy KubeVirt
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_kubevirt"
    tasks_from: main.yml
    public: yes
  when: not kubeinit_okd_openshift_deploy | default(False)
