---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Override initial pullsecret with fake auth
  ansible.builtin.set_fact:
    kubeinit_okd_registry_pullsecret: '  { "auths": { "fakeregistry:5000": { "auth": "foo" } } }'
  when: not 'registry' in kubeinit_cluster_hostvars.services and kubeinit_okd_registry_pullsecret_empty in kubeinit_okd_registry_pullsecret

- name: Only use these tasks if we are deploying OCP and not OKD
  block:

    - name: Check for openshift pullsecret in container secrets
      ansible.builtin.set_fact:
        _result_pullsecret_content: "{{ omit if (hostvars[kubeinit_secrets_name].secrets[openshift_pullsecret_secret] | default('') | length == 0) else hostvars[kubeinit_secrets_name].secrets[openshift_pullsecret_secret] }}"
      when: kubeinit_facts_hostvars.container_run|bool

    - name: Read openshift pullsecret
      ansible.builtin.slurp:
        src: "{{ kubeinit_okd_openshift_pullsecret }}"
      register: _result_openshift_pullsecret
      delegate_to: localhost
      when: |
        not kubeinit_facts_hostvars.container_run|bool and
        kubeinit_okd_openshift_pullsecret is defined and
        kubeinit_okd_openshift_pullsecret

    - name: Set pullsecret content
      ansible.builtin.set_fact:
        _result_pullsecret_content: "{{ _result_pullsecret_content if (_result_pullsecret_content is defined) else _result_openshift_pullsecret.content }}"
      when: _result_openshift_pullsecret is defined

    - name: Create registry auth for pullsecret using individual auth values
      ansible.builtin.set_fact:
        # The spaces after the first single quote is required, do not remove
        # Something in Ansible appears to be recognizing this as valid Python,
        # so it's getting transformed into a Python list and then serialized
        # using Python's str(), which is why we end up with the single-quoted values.
        ocp_registry_token: '  { "auths": { "cloud.openshift.com": { "auth": "{{ kubeinit_okd_openshift_registry_token_cloud_openshift_com }}", "email": "{{ kubeinit_okd_openshift_registry_token_email }}" } ,"quay.io": { "auth": "{{ kubeinit_okd_openshift_registry_token_quay_io }}", "email": "{{ kubeinit_okd_openshift_registry_token_email }}" } ,"registry.connect.redhat.com": { "auth": "{{ kubeinit_okd_openshift_registry_token_registry_connect_redhat_com }}", "email": "{{ kubeinit_okd_openshift_registry_token_email }}" } ,"registry.redhat.io": { "auth": "{{ kubeinit_okd_openshift_registry_token_registry_redhat_io }}", "email": "{{ kubeinit_okd_openshift_registry_token_email }}" } } }'
      when: |
        not kubeinit_facts_hostvars.container_run|bool and
        not kubeinit_okd_openshift_pullsecret is defined or
        not kubeinit_okd_openshift_pullsecret

    - name: Create registry auth for pullsecret
      ansible.builtin.shell: |
        set -eo pipefail
        {% if _result_pullsecret_content is defined %}
        echo '{{ _result_pullsecret_content | b64decode | trim }}' | jq -c ".auths"
        {% else %}
        echo '{{ ocp_registry_token }}' | jq -c ".auths"
        {% endif %}
      args:
        executable: /bin/bash
      register: _result_registry_pullsecret
      changed_when: "_result_registry_pullsecret.rc == 0"

    - name: Append openshift auth to pullsecret
      ansible.builtin.shell: |
        set -o pipefail
        echo '{{ kubeinit_okd_registry_pullsecret }}' | jq -c \
          '.auths += {{ _result_registry_pullsecret.stdout }}'
      args:
        executable: /bin/bash
      register: _result_new_pullsecret
      changed_when: "_result_new_pullsecret.rc == 0"

    - name: Override final openshift kubeinit_okd_registry_pullsecret with both auths
      ansible.builtin.set_fact:
        kubeinit_okd_registry_pullsecret: '  {{ _result_new_pullsecret.stdout }}'

  when: kubeinit_okd_openshift_deploy

- name: Debug kubeinit_okd_registry_pullsecret before overriding kubeinit_registry_pullsecret
  ansible.builtin.debug:
    var: kubeinit_okd_registry_pullsecret

# This task will override the default "empty" pullsecret from the registry playbook
# with the content of the pullsecret defined in the OKD playbook
- name: Assign a default pullsecret when we use a local registry and deploying OKD
  ansible.builtin.set_fact:
    kubeinit_registry_pullsecret: '  {{ kubeinit_okd_registry_pullsecret }}'

- name: Debug kubeinit_registry_pullsecret after overriding it
  ansible.builtin.debug:
    var: kubeinit_registry_pullsecret

- name: Setup the cluster provision container
  ansible.builtin.include_role:
    name: kubeinit.kubeinit.kubeinit_services
    tasks_from: create_provision_container.yml
  vars:
    kubeinit_deployment_node_name: "{{ kubeinit_provision_service_node }}"
    kubeinit_deployment_pod_name: "{{ hostvars[kubeinit_provision_service_node].guest_name }}-pod"
    kubeinit_deployment_delegate: "{{ hostvars[kubeinit_provision_service_node].target }}"
    kubeinit_deployment_os: "{{ hostvars[kubeinit_provision_service_node].os }}"

- name: Delegate to the provision service node
  block:

    - name: "Render net info"
      ansible.builtin.shell: |
        set -o pipefail
        echo "{{ kubeinit_okd_pod_cidr }}" > ~/pod_cidr
        echo "{{ kubeinit_okd_service_cidr }}" > ~/service_cidr
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"

    - name: Install services requirements
      ansible.builtin.yum:
        name: socat
        state: present
        use_backend: dnf

    #
    # Include the install configuration
    #

    - name: Download okd installer
      ansible.builtin.get_url:
        url: "{{ kubeinit_okd_dependencies.installer }}"
        dest: ~/

    - name: Download okd client
      ansible.builtin.get_url:
        url: "{{ kubeinit_okd_dependencies.client }}"
        dest: ~/

    - name: Install okd client and installer
      ansible.builtin.shell: |
        set -o pipefail
        dnf install -y libvirt
        cd
        rm -rf install_dir
        mkdir install_dir
        for f in *.tar.gz; do tar -xvf "$f"; done
        mv kubectl oc openshift-install /usr/local/bin/
        oc version
        openshift-install version
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"

    #
    # Configure local registry
    #

    - name: Render the required container images
      ansible.builtin.shell: |
        set -o pipefail

        {% if ( kubeinit_okd_openshift_deploy | default(False) ) %}
        URL="{{ kubeinit_okd_registry_release_url }}"
        {% else %}
        URL=$( curl -s "{{ kubeinit_okd_registry_release_url }}" \
           | jq -r '.assets[] | select(.name=="release.txt") | .browser_download_url' )
        {% endif %}

        curl -LO "$URL"
        cat release.txt | grep quay | grep -v "Pull From" | tr -s ' ' | cut -d ' ' -f 3 > ~/kubeinit_deployment_images.txt
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"

    - name: Mirror OKD remote registry to local
      ansible.builtin.shell: |
        set -eo pipefail
        oc adm \
            release mirror \
            --registry-config={{ kubeinit_registry_auth_file }} \
            --from={{ kubeinit_okd_registry }}/{{ kubeinit_okd_registry_organization }}/{{ kubeinit_okd_registry_repository }}:{{ kubeinit_okd_registry_release_tag }}{% if ( kubeinit_okd_openshift_deploy | default(False) ) %}-x86_64{% endif %} \
            --to={{ kubeinit_registry_uri }}/{{ kubeinit_okd_registry_repository }} \
            --to-release-image={{ kubeinit_registry_uri }}/{{ kubeinit_okd_registry_repository }}:{{ kubeinit_okd_registry_release_tag }} \
            2>&1 | tee mirror-output.txt
        oc adm \
            release extract \
            --registry-config={{ kubeinit_registry_auth_file }} \
            --command=openshift-install "{{ kubeinit_registry_uri }}/{{ kubeinit_okd_registry_repository }}:{{ kubeinit_okd_registry_release_tag }}"
        oc adm \
            release extract \
            --registry-config={{ kubeinit_registry_auth_file }} \
            --command=oc "{{ kubeinit_registry_uri }}/{{ kubeinit_okd_registry_repository }}:{{ kubeinit_okd_registry_release_tag }}"
        # This will override the current client and installer binaries
        cp oc openshift-install /usr/local/bin/
        oc version
        openshift-install version
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      when: "'registry' in kubeinit_cluster_hostvars.services"

  delegate_to: "{{ kubeinit_provision_service_node }}"

- name: Set name of CoreOS distribution
  ansible.builtin.set_fact:
    kubeinit_coreos_distribution: "{{ 'rhcos' if (kubeinit_okd_openshift_deploy) else 'fcos' }}"

- name: Download kernel image
  ansible.builtin.get_url:
    validate_certs: False
    use_proxy: True
    url: "{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].uri }}{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].kernel }}"
    dest: "{{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].kernel }}"
    force: no
    mode: '0666'
  loop: "{{ kubeinit_cluster_hostvars.hypervisors }}"
  loop_control:
    loop_var: kubeinit_deployment_node_name
  delegate_to: "{{ kubeinit_deployment_node_name }}"

- name: Download initrd image
  ansible.builtin.get_url:
    validate_certs: False
    use_proxy: True
    url: "{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].uri }}{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].initrd }}"
    dest: "{{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].initrd }}"
    force: no
    mode: '0666'
  loop: "{{ kubeinit_cluster_hostvars.hypervisors }}"
  loop_control:
    loop_var: kubeinit_deployment_node_name
  delegate_to: "{{ kubeinit_deployment_node_name }}"

- name: Create the treeinfo directory for FCOS
  ansible.builtin.shell: |
    cat <<EOF > {{ kubeinit_libvirt_target_image_dir }}/.treeinfo
    [general]
    arch = x86_64
    family = Fedora CoreOS
    platforms = x86_64
    version = kubeinit_libvirt_fcos_release.split(".")[0]
    [images-x86_64]
    initrd = {{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].initrd }}
    kernel = {{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].kernel }}
    EOF
  args:
    executable: /bin/bash
  register: _result
  changed_when: "_result.rc == 0"
  loop: "{{ kubeinit_cluster_hostvars.hypervisors }}"
  loop_control:
    loop_var: kubeinit_deployment_node_name
  delegate_to: "{{ kubeinit_deployment_node_name }}"
  when: not kubeinit_okd_openshift_deploy

- name: Create the treeinfo directory for RHCOS
  ansible.builtin.shell: |
    cat <<EOF > {{ kubeinit_libvirt_target_image_dir }}/.treeinfo
    [general]
    arch = x86_64
    family = Red Hat CoreOS
    platforms = x86_64
    version = {{ kubeinit_okd_registry_release_tag_aux | default(omit) }}
    [images-x86_64]
    initrd = {{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].initrd }}
    kernel = {{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].kernel }}
    EOF
  args:
    executable: /bin/bash
  register: _result
  changed_when: "_result.rc == 0"
  loop: "{{ kubeinit_cluster_hostvars.hypervisors }}"
  loop_control:
    loop_var: kubeinit_deployment_node_name
  delegate_to: "{{ kubeinit_deployment_node_name }}"
  when: kubeinit_okd_openshift_deploy

- name: Delegate to kubeinit_provision_service_node
  block:

    - name: Create OKD directory for apache
      ansible.builtin.file:
        path: "/var/kubeinit/html/okd4"
        state: directory
        mode: 0775
        recurse: yes

    - name: Download initrd image
      ansible.builtin.get_url:
        url: "{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].uri }}{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].initrd }}"
        dest: "/var/kubeinit/html/okd4/"
        mode: 0775

    - name: Download rootfs image
      ansible.builtin.get_url:
        url: "{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].uri }}{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].rootfs }}"
        dest: "/var/kubeinit/html/okd4/"
        mode: 0775

    - name: Download raw image
      ansible.builtin.get_url:
        url: "{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].uri }}{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].raw }}"
        dest: "/var/kubeinit/html/okd4/"
        mode: 0775

    - name: Download signature file
      ansible.builtin.get_url:
        url: "{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].uri }}{{ kubeinit_okd_coreos_images[kubeinit_coreos_distribution].sig }}"
        dest: "/var/kubeinit/html/okd4/"
        mode: 0775
      when: not kubeinit_okd_openshift_deploy

    - name: Render the cluster template
      ansible.builtin.template:
        src: "install-config.yaml.j2"
        dest: "~/install_dir/install-config.yaml"
        mode: '0644'

    - name: Backup the install config file
      ansible.builtin.shell: |
        cp ~/install_dir/install-config.yaml ~/install-config.yaml
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"

    - name: Render the bootstrap details
      ansible.builtin.shell: |
        openshift-install create manifests --dir=install_dir/
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"

    - name: Enable master schedulable if there are no worker nodes
      ansible.builtin.shell: |
        set -o pipefail
        cd
        yaml_file="install_dir/manifests/cluster-scheduler-02-config.yml"
        key="mastersSchedulable"
        new_value="true"
        sed -r "s/^(\s*${key}\s*:\s*).*/\1${new_value}/" -i "$yaml_file"
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      when: not kubeinit_compute_count|int > 0

    - name: Disable master schedulable if there is at least one worker node
      ansible.builtin.shell: |
        set -o pipefail
        cd
        yaml_file="install_dir/manifests/cluster-scheduler-02-config.yml"
        key="mastersSchedulable"
        new_value="false"
        sed -r "s/^(\s*${key}\s*:\s*).*/\1${new_value}/" -i "$yaml_file"
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      when: kubeinit_compute_count|int > 0

    - name: Render ignition files
      ansible.builtin.shell: |
        # We backup first the manifests
        tar -czvf install_manifests_backup.tar.gz ~/install_dir/
        openshift-install create ignition-configs --dir=install_dir/
        cp -R install_dir/* "/var/kubeinit/html/okd4/"
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"

    - name: Apply permissions to the apache folder
      ansible.builtin.file:
        path: "/var/kubeinit/html/"
        state: directory
        recurse: yes
        mode: '0755'

    - name: Create kube directory
      ansible.builtin.file:
        path: ~/.kube
        state: directory
        mode: '0644'

    - name: Autoload kubeconfig
      ansible.builtin.shell: |
        echo "export KUBECONFIG=~/install_dir/auth/kubeconfig" >> ~/.bashrc
      args:
        executable: /bin/bash
      ignore_errors: yes
      register: _result
      changed_when: "_result.rc == 0"

  delegate_to: "{{ kubeinit_provision_service_node }}"
