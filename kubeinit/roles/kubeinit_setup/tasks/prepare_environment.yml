---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- block:
    - name: Gather kubeinit setup facts if needed
      ansible.builtin.include_tasks: gather_setup_facts.yml
      vars:
        facts_prepared: "{{ kubeinit_facts_name is defined }}"
      when: not facts_prepared

    - block:
        - name: "Stop before 'task-prepare-environment' when requested"
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_before_task is defined and kubeinit_stop_before_task == 'task-prepare-environment'
  tags: omit_from_grapher

- name: Install python3-pip package
  ansible.builtin.package:
    name: "{{ hostvars[kubeinit_setup_host_name].package_pip }}"
    state: present
    use: "{{ hostvars[kubeinit_setup_host_name].package_manager }}"
  become: true
  become_user: root
  delegate_to: "{{ kubeinit_setup_host_name }}"
  register: _result
  failed_when: _result is not defined

- name: Setup kubic repo for Ubuntu
  block:

    - name: Set version facts
      ansible.builtin.set_fact:
        _version: "{{ hostvars[kubeinit_setup_host_name].ansible_distribution_version }}"
        _stability: "{{ 'stable' if (hostvars[kubeinit_setup_host_name].ansible_distribution_version is version('21.04', 'le')) else 'testing' }}"

    - name: Set version facts
      ansible.builtin.set_fact:
        _path_element: "{{ _stability + '/xUbuntu_' + _version }}"

    - name: Add the Podman Ubuntu package repository to Apt
      ansible.builtin.shell: |
        set -eo pipefail
        echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/{{ _path_element }}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:{{ _stability }}.list
        curl -L "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/{{ _path_element }}/Release.key" | apt-key add -
        apt-get update
      args:
        executable: /bin/bash
      become: true
      become_user: root
      delegate_to: "{{ kubeinit_setup_host_name }}"
      register: _result
      changed_when: "_result.rc == 0"

  when: hostvars[kubeinit_setup_host_name].ansible_distribution == 'Ubuntu'

- name: Install podman package
  ansible.builtin.package:
    name: podman
    state: present
    use: "{{ hostvars[kubeinit_setup_host_name].package_manager }}"
  become: true
  become_user: root
  delegate_to: "{{ kubeinit_setup_host_name }}"
  register: _result
  failed_when: _result is not defined

- name: Install jq package
  ansible.builtin.package:
    name: jq
    state: present
    use: "{{ hostvars[kubeinit_setup_host_name].package_manager }}"
  become: true
  become_user: root
  delegate_to: "{{ kubeinit_setup_host_name }}"
  register: _result
  failed_when: _result is not defined

- name: Get status of kubeinit folder
  ansible.builtin.stat:
    path: "{{ kubeinit_git_clone_path | default('~/kubeinit') }}"
  register: _result_stat_kubeinit
  delegate_to: "{{ kubeinit_setup_host_name }}"

- name: Remember that we will be cloning the kubeinit repo
  ansible.builtin.add_host:
    name: "{{ kubeinit_setup_host_name }}"
    git_clone_kubeinit: "{{ not _result_stat_kubeinit.stat.exists|bool }}"

- name: Install git package when git clone is enabled
  ansible.builtin.package:
    name: git
    state: present
  become: true
  become_user: root
  delegate_to: "{{ kubeinit_setup_host_name }}"
  register: _result
  when: hostvars[kubeinit_setup_host_name].git_clone_kubeinit|bool

- block:
    - name: Add task-prepare-environment to tasks_completed
      ansible.builtin.add_host:
        name: "{{ kubeinit_facts_name }}"
        tasks_completed: "{{ kubeinit_facts_hostvars.tasks_completed | union(['task-prepare-environment']) }}"

    - name: Update kubeinit_facts_hostvars
      ansible.builtin.set_fact:
        kubeinit_facts_hostvars: "{{ hostvars[kubeinit_facts_name] }}"

    - block:
        - name: Stop after 'task-prepare-environment' when requested
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in kubeinit_facts_hostvars.tasks_completed
  tags: omit_from_grapher
