---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- block:
    - name: Gather kubeinit setup facts if needed
      ansible.builtin.include_tasks: gather_setup_facts.yml
      vars:
        facts_prepared: "{{ kubeinit_facts_name is defined }}"
      when: not facts_prepared

    - block:
        - name: "Stop before 'task-prepare-environment' when requested"
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_before_task is defined and kubeinit_stop_before_task == 'task-prepare-environment'
  tags: omit_from_grapher

- name: Install python3-pip package
  ansible.builtin.package:
    name: "{{ hostvars[kubeinit_setup_host_name].package_pip }}"
    state: present
    use: "{{ hostvars[kubeinit_setup_host_name].package_manager }}"
  become: true
  become_user: root
  delegate_to: "{{ kubeinit_setup_host_name }}"
  register: _result
  failed_when: _result is not defined

- name: Install podman package
  ansible.builtin.package:
    name: podman
    state: present
    use: "{{ hostvars[kubeinit_setup_host_name].package_manager }}"
  become: true
  become_user: root
  delegate_to: "{{ kubeinit_setup_host_name }}"
  register: _result
  failed_when: _result is not defined
  when: not hostvars[kubeinit_setup_host_name].podman_is_installed

- name: Install jq package
  ansible.builtin.package:
    name: jq
    state: present
    use: "{{ hostvars[kubeinit_setup_host_name].package_manager }}"
  become: true
  become_user: root
  delegate_to: "{{ kubeinit_setup_host_name }}"
  register: _result
  failed_when: _result is not defined

- name: Get status of kubeinit folder
  ansible.builtin.stat:
    path: "{{ kubeinit_git_clone_path | default('~/kubeinit') }}"
  register: _result_stat_kubeinit
  delegate_to: "{{ kubeinit_setup_host_name }}"

- name: Install git package when git clone is enabled
  ansible.builtin.package:
    name: git
    state: present
  become: true
  become_user: root
  delegate_to: "{{ kubeinit_setup_host_name }}"
  register: _result
  when: not _result_stat_kubeinit.stat.exists

- name: Load kubeinit_ssh_config_hosts_spec from yaml into a list of key=value lists if defined
  ansible.builtin.set_fact:
    ssh_config_hosts_list: "{{ kubeinit_ssh_config_hosts_spec | from_yaml }}"
  when: kubeinit_ssh_config_hosts_spec is defined

- name: Convert list of list into list of dictionary
  ansible.builtin.set_fact:
    ssh_config_hosts: "{{ (ssh_config_hosts | default([])) | union([_dict]) }}"
  loop: "{{ ssh_config_hosts_list }}"
  vars:
    _keys: "{{ item | map('regex_replace', '^(.*?)=(.*)$', '\\1') | trim }}"
    _vals: "{{ item | map('regex_replace', '^(.*?)=(.*)$', '\\2') | trim }}"
    _dict: "{{ dict(_keys|zip(_vals)) }}"
  when: ssh_config_hosts_list is defined

- name: Add host entries to ssh_config_hosts group
  ansible.builtin.add_host:
    name: "{{ item.host }}"
    groups: 'ssh_config_hosts'
    ssh_hostname: "{{ item.ssh_hostname }}"
  loop: "{{ ssh_config_hosts }}"
  when: ssh_config_hosts is defined

- name: Create ssh config file
  ansible.builtin.file:
    path: ~/.ssh/config
    state: touch
    mode: 0644
  when: kubeinit_facts_hostvars.container_run|bool and 'ssh_config_hosts' in groups and groups['ssh_config_hosts'] | list | length > 0

- name: Add ssh_config_hosts to ~/.ssh/config
  ansible.builtin.blockinfile:
    path: ~/.ssh/config
    mode: '0644'
    block: |
      {% for host in groups['ssh_config_hosts'] %}

      Host {{ host }}
        Hostname {{ hostvars[host].ssh_hostname }}
        IdentityFile ~/.ssh/id_{{ kubeinit_common_ssh_keytype }}
        UserKnownHostsFile /dev/null
        StrictHostKeyChecking accept-new
      {% endfor %}
  when: kubeinit_facts_hostvars.container_run|bool and 'ssh_config_hosts' in groups and groups['ssh_config_hosts'] | list | length > 0

- block:
    - name: Add task-prepare-environment to tasks_completed
      ansible.builtin.add_host:
        name: "{{ kubeinit_facts_name }}"
        tasks_completed: "{{ kubeinit_facts_hostvars.tasks_completed | union(['task-prepare-environment']) }}"

    - name: Update kubeinit_facts_hostvars
      ansible.builtin.set_fact:
        kubeinit_facts_hostvars: "{{ hostvars[kubeinit_facts_name] }}"

    - block:
        - name: Stop after 'task-prepare-environment' when requested
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in kubeinit_facts_hostvars.tasks_completed
  tags: omit_from_grapher
