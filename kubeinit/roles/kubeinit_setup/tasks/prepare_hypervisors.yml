---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- block:
    - name: Prepare environment if needed
      ansible.builtin.include_tasks: prepare_environment.yml
      vars:
        environment_prepared: "{{ kubeinit_facts_name is defined }}"
      when: not environment_prepared

    - block:
        - name: "Stop before 'task-prepare-hypervisors' when requested"
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_before_task is defined and kubeinit_stop_before_task == 'task-prepare-hypervisors'
  tags: omit_from_grapher

- name: Delegate to kubeinit_setup_host_name
  block:

    - name: Define additional host facts
      ansible.builtin.set_fact:
        kubeinit_deploy_keypair_path: "~/.ssh/kubeinit_id_{{ kubeinit_common_ssh_keytype }}"

    - name: Create ssh config file
      ansible.builtin.file:
        path: ~/.ssh/config
        state: touch
        mode: 0644
      when: (groups['hypervisor_hosts'] | default([]) | map('extract', hostvars, 'ssh_hostname') | list | length > 0)

    - name: Add hypervisor hosts ssh_hostname to ~/.ssh/config
      ansible.builtin.blockinfile:
        path: ~/.ssh/config
        mode: '0644'
        block: |
          {% for host in groups['hypervisor_hosts'] %}
          {% if hostvars[host].ssh_hostname is defined %}

          Host {{ hostvars[host].ansible_host }}
            Hostname {{ hostvars[host].ssh_hostname }}
            IdentityFile {{ kubeinit_deploy_keypair_path }}
            UserKnownHostsFile /dev/null
            StrictHostKeyChecking accept-new
          {% endif %}
          {% endfor %}
      when: (groups['hypervisor_hosts'] | default([]) | map('extract', hostvars, 'ssh_hostname') | list | length > 0)

    - name: Generate an OpenSSH keypair for setup_host to have remote access to hypervisor hosts
      community.crypto.openssh_keypair:
        path: "{{ kubeinit_deploy_keypair_path }}"
        type: "{{ kubeinit_common_ssh_keytype }}"
        comment: "{{ kubeinit_setup_host_name + ' ' + hostvars[kubeinit_setup_host_name].ansible_ssh_user + '@' + hostvars[kubeinit_setup_host_name].ansible_host }}"
        regenerate: 'never'
      register: _result_setup_keypair
      when: "'hypervisor_hosts' in groups and groups['hypervisor_hosts'] | list | length > 0"

    - name: Add keypair to authorized_keys on setup_host
      ansible.posix.authorized_key:
        user: "{{ kubeinit_facts_hostvars.remote_user }}"
        key: "{{ _result_setup_keypair.public_key }}"
        comment: "{{ _result_setup_keypair.comment }}"
        state: present

    - name: Ensure hypervisor hosts have all requirements for ansible
      ansible.builtin.include_tasks: setup_ansible_host.yml
      loop: "{{ groups['hypervisor_hosts'] | default([]) }}"
      loop_control:
        loop_var: _param_ansible_host

    - name: Gather hypervisor host facts
      ansible.builtin.include_tasks: gather_host_facts.yml
      loop: "{{ groups['hypervisor_hosts'] | default([]) }}"
      loop_control:
        loop_var: _param_gather_host

    - name: Add setup_host authorized key to hypervisor hosts
      ansible.posix.authorized_key:
        user: "{{ hostvars[hypervisor_host].ssh_username | default(kubeinit_facts_hostvars.remote_user) }}"
        key: "{{ _result_setup_keypair.public_key }}"
        comment: "{{ _result_setup_keypair.comment }}"
        state: present
      loop: "{{ groups['hypervisor_hosts'] | default([]) }}"
      loop_control:
        loop_var: hypervisor_host
      become: "{{ true if (hostvars[hypervisor_host].ssh_username | default(kubeinit_facts_hostvars.remote_user) == 'root') else false }}"
      become_user: "{{ hostvars[hypervisor_host].ssh_username | default(kubeinit_facts_hostvars.remote_user) }}"
      delegate_to: "{{ hypervisor_host }}"

    - name: Confirm access to hypervisors from setup host and user
      ansible.builtin.shell: |
        set -o pipefail
        ssh \
            -i {{ kubeinit_deploy_keypair_path }} \
            -o ConnectTimeout=5 \
            -o BatchMode=yes \
            -o UserKnownHostsFile=/dev/null \
            -o StrictHostKeyChecking=accept-new \
            {{ hostvars[hypervisor_host].ssh_username | default(kubeinit_facts_hostvars.remote_user) }}@{{ hostvars[hypervisor_host].ansible_host }} 'echo connected' || true
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      retries: 30
      delay: 10
      until: "'connected' in _result.stdout"
      loop: "{{ groups['hypervisor_hosts'] | default([]) }}"
      loop_control:
        loop_var: hypervisor_host

  environment:
    PATH: "{{ hostvars[kubeinit_setup_host_name].remote_home }}/.local/bin:{{ hostvars[kubeinit_setup_host_name].remote_path }}"
  delegate_to: "{{ kubeinit_setup_host_name }}"

- block:
    - name: Add task-prepare-hypervisors to tasks_completed
      ansible.builtin.add_host:
        name: "{{ kubeinit_facts_name }}"
        tasks_completed: "{{ kubeinit_facts_hostvars.tasks_completed | union(['task-prepare-hypervisors']) }}"

    - name: Update kubeinit_facts_hostvars
      ansible.builtin.set_fact:
        kubeinit_facts_hostvars: "{{ hostvars[kubeinit_facts_name] }}"

    - block:
        - name: Stop after 'task-prepare-hypervisors' when requested
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in kubeinit_facts_hostvars.tasks_completed
  tags: omit_from_grapher
