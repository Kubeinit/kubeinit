---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Prepare the environment and stop the deployment if required
  block:
    - name: Prepare environment if needed
      ansible.builtin.include_tasks: prepare_environment.yml
      vars:
        environment_prepared: "{{ 'kubeinit_facts' in groups }}"
      when: not environment_prepared

    - name: Stop the deployment if required
      block:
        - name: "Stop before 'task-deploy-setup' when requested"
          ansible.builtin.add_host: name="kubeinit-facts" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_before_task is defined and kubeinit_stop_before_task == 'task-deploy-setup'
  tags: omit_from_grapher

- name: Delegate to kubeinit_setup_host_name
  block:

    - name: Install latest pip module
      ansible.builtin.pip:
        name: pip
        executable: "{{ hostvars[kubeinit_setup_host_name].pip_executable }}"
        state: latest
        extra_args: --user

    - name: Install latest cryptography module
      ansible.builtin.pip:
        name: cryptography
        executable: "{{ hostvars[kubeinit_setup_host_name].pip_executable }}"
        state: latest
        extra_args: --user

    - name: Install latest ansible module
      ansible.builtin.pip:
        name: ansible
        executable: "{{ hostvars[kubeinit_setup_host_name].pip_executable }}"
        state: latest
        extra_args: --user

    - name: Install latest shyaml and netaddr modules
      ansible.builtin.pip:
        name:
          - shyaml
          - netaddr
          - ipython
        executable: "{{ hostvars[kubeinit_setup_host_name].pip_executable }}"
        state: latest
        extra_args: --user

    - name: Set _git_clone_path fact
      ansible.builtin.set_fact:
        _git_clone_path: "{{ kubeinit_git_clone_path | default('~/kubeinit') }}"

    - name: Clone the kubeinit git repo
      ansible.builtin.git:
        clone: true
        dest: "{{ _git_clone_path }}"
        repo: https://github.com/Kubeinit/kubeinit.git
        version: "{{ kubeinit_git_clone_version | default('main') }}"
      when: hostvars[kubeinit_setup_host_name].git_clone_kubeinit|bool

    - name: Install ansible-galaxy requirements
      community.general.ansible_galaxy_install:
        type: collection
        requirements_file: "{{ _git_clone_path + '/kubeinit/requirements.yml' }}"
        force: true
      register: _result
      until: _result.rc == 0

    - name: Remove any existing kubeinit/kubeinit galaxy collection
      ansible.builtin.file:
        path: ~/.ansible/collections/ansible_collections/kubeinit/kubeinit
        state: absent

    - name: Build the kubeinit/kubeinit galaxy collection
      ansible.builtin.command:
        chdir: "{{ _git_clone_path }}"
        cmd: ansible-galaxy collection build kubeinit --verbose --force --output-path releases/
      register: _result
      changed_when: "_result.rc == 0"

    - name: Set galaxy.yml facts
      ansible.builtin.set_fact:
        galaxy_facts: "{{ lookup('file', _git_clone_path + '/kubeinit/galaxy.yml') | from_yaml }}"

    - name: Install the kubeinit/kubeinit galaxy collection
      ansible.builtin.command:
        chdir: "{{ _git_clone_path }}"
        cmd: ansible-galaxy collection install --force --force-with-deps releases/kubeinit-kubeinit-{{ galaxy_facts.version }}.tar.gz
      register: _result
      changed_when: "_result.rc == 0"
      failed_when: _result is not defined

    - name: Clean up releases folder after installing the collection
      ansible.builtin.file:
        path: "{{ _git_clone_path + '/releases' }}"
        state: absent

    - name: Update kubeinit_facts_hostvars
      ansible.builtin.set_fact:
        kubeinit_facts_hostvars: "{{ hostvars['kubeinit-facts'] }}"
        kubeinit_ssh_keytype: "{{ hostvars['kubeinit-facts'].ssh_keytype }}"

    - name: Define additional host facts
      ansible.builtin.set_fact:
        kubeinit_deploy_keypair_path: "~/.ssh/kubeinit_id_{{ kubeinit_ssh_keytype }}"
        kubeinit_deploy_ssh_config: "~/.ssh/kubeinit_config"

    - name: Add ansible_ssh_extra_args to kubeinit_hypervisors group
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: 'kubeinit_hypervisors'
        deploy_ssh_config: "{{ kubeinit_deploy_ssh_config }}"
      loop: "{{ groups['kubeinit_hypervisors'] }}"

    - name: Check if default ssh config exists
      ansible.builtin.stat:
        path: "~/.ssh/config"
      register: _result_default_ssh_config_stat

    - name: Create ssh config file from template
      ansible.builtin.include_role:
        name: kubeinit.kubeinit.kubeinit_prepare
        tasks_from: create_host_ssh_config.yml
        public: true
      vars:
        _param_hosts: "{{ groups['kubeinit_hypervisors'] }}"
        _param_ssh_keytype: "{{ hostvars['kubeinit-facts'].ssh_keytype }}"
        _param_keypair_path: "{{ kubeinit_deploy_keypair_path }}"
        _param_dest_path: "{{ kubeinit_deploy_ssh_config }}"
        _param_include_paths: "{{ [_result_default_ssh_config_stat.stat.path] if (_result_default_ssh_config_stat.stat.exists) else [] }}"
      #
      # TODO:FIXME:libvirt-switch: This should be only visible when deploying in libvirt
      #
      when: kubeinit_spec_driver == 'libvirt'

    - name: Generate an OpenSSH keypair for setup_host to have remote access to hypervisor hosts
      community.crypto.openssh_keypair:
        path: "{{ kubeinit_deploy_keypair_path }}"
        type: "{{ kubeinit_ssh_keytype }}"
        comment: "{{ kubeinit_setup_host_name + ' ' + kubeinit_facts_hostvars.remote_user + '@' + hostvars[kubeinit_setup_host_name].ssh_connection_address }}"
        regenerate: 'never'
      register: _result_deploy_keypair
      when: "'kubeinit_hypervisors' in groups and groups['kubeinit_hypervisors'] | list | length > 0"

    - name: Set facts from keypair
      ansible.builtin.set_fact:
        keypair_pubkey: "{{ _result_deploy_keypair.public_key }}"
        keypair_comment: "{{ _result_deploy_keypair.comment }}"
        authorized_key: "{{ _result_deploy_keypair.public_key + ' ' + _result_deploy_keypair.comment }}"
      delegate_facts: true

    - name: Add keypair to authorized_keys on setup_host
      ansible.posix.authorized_key:
        user: "{{ kubeinit_facts_hostvars.remote_user }}"
        key: "{{ _result_deploy_keypair.public_key }}"
        comment: "{{ _result_deploy_keypair.comment }}"
        state: present

  vars:
    kubeinit_setup_host_name: "{{ inventory_hostname }}"
  environment:
    PATH: "{{ hostvars[kubeinit_setup_host_name].remote_home }}/.local/bin:{{ hostvars[kubeinit_setup_host_name].remote_path }}"
  delegate_to: "{{ kubeinit_setup_host_name }}"

- name: Update progress and stop the deployment if required
  block:
    - name: Add task-deploy-setup to tasks_completed
      ansible.builtin.add_host:
        name: "kubeinit-facts"
        tasks_completed: "{{ kubeinit_facts_hostvars.tasks_completed | union(['task-deploy-setup']) }}"

    - name: Update kubeinit_facts_hostvars
      ansible.builtin.set_fact:
        kubeinit_facts_hostvars: "{{ hostvars['kubeinit-facts'] }}"

    - name: Stop the deployment if required
      block:
        - name: Stop after 'task-deploy-setup' when requested
          ansible.builtin.add_host: name="kubeinit-facts" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in kubeinit_facts_hostvars.tasks_completed
  tags: omit_from_grapher
