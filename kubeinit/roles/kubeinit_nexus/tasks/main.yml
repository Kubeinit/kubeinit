---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


- name: Create Nexus folders
  ansible.builtin.file:
    path: "{{ item | safe | trim }}"
    state: directory
    recurse: yes
    mode: '0755'
  loop: "{{ kubeinit_nexus_directories }}"

- name: Create nexus-data subfolders
  ansible.builtin.file:
    path: "{{ item | safe | trim }}"
    state: directory
    recurse: yes
    mode: '0755'
  loop:
    - "{{ kubeinit_nexus_directory_data }}/etc/ssl"
    - "{{ kubeinit_nexus_directory_data }}/log"
    - "{{ kubeinit_nexus_directory_data }}/tmp"

- name: Create the property file update script
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      set -eo pipefail
      cp /opt/sonatype/nexus/etc/nexus-default.properties /nexus-data/etc/nexus.properties
      sed -i -e 's/^\([^#]\)/# \1/' -e 's/^# nexus-args=/nexus-args=/' -e 's/jetty-http/jetty-https/' -e 's/# application-port=8081/application-port-ssl=8443/' -e '$ a ssl.etc=${karaf.data}/etc/ssl' -e '$ a nexus.scripts.allowCreation=true' /nexus-data/etc/nexus.properties
      sed -i -e '/New id="sslContextFactory"/ a REPLACE_ME' -e 's;REPLACE_ME;    <Set name="certAlias">{{ kubeinit_cluster_name }}-nexus</Set>;' /opt/sonatype/nexus/etc/jetty/jetty-https.xml
    dest: "{{ kubeinit_nexus_directory_data }}/update-props.sh"
    mode: '0644'

- name: Install buildah if required
  ansible.builtin.package:
    state: present
    name: "buildah"

- name: Remove any old nexus buildah container
  ansible.builtin.shell: |
    set -o pipefail
    buildah rm {{ kubeinit_cluster_name }}-nexus || true
  args:
    executable: /bin/bash
  register: _result
  changed_when: "_result.rc == 0"

- name: Create a new working container image
  ansible.builtin.command: buildah from --name {{ kubeinit_cluster_name }}-nexus --volume "{{ kubeinit_nexus_directory_data }}:/nexus-data" docker.io/sonatype/nexus3:3.30.0
  register: _result
  changed_when: "_result.rc == 0"

- name: Set working directory inside container
  ansible.builtin.command: buildah config --workingdir /nexus-data/tmp {{ kubeinit_cluster_name }}-nexus
  register: _result
  changed_when: "_result.rc == 0"

- name: Update image
  ansible.builtin.command: buildah run --user root:root {{ kubeinit_cluster_name }}-nexus -- dnf update -q -y
  register: _result
  changed_when: "_result.rc == 0"

- name: Create java keystore
  ansible.builtin.command: buildah run --user root:root {{ kubeinit_cluster_name }}-nexus -- keytool -genkeypair -keystore keystore.jks -storepass password -keypass password -alias {{ kubeinit_cluster_name }}-nexus -keyalg RSA -keysize 2048 -validity 5000 -dname "CN=*.{{ kubeinit_cluster_fqdn }}, OU={{ kubeinit_common_certificate_organizational_unit }}, O={{ kubeinit_common_certificate_organization }}, L={{ kubeinit_common_certificate_locality }}, ST={{ kubeinit_common_certificate_state }}, C={{ kubeinit_common_certificate_country }}" -ext "SAN=DNS:{{ kubeinit_nexus_fqdn }},IP:{{ kubeinit_nexus_service_address }}" -ext "BC=ca:true"
  register: _result
  changed_when: "_result.rc == 0"

- name: Copy keystore file
  ansible.builtin.command: buildah run --user root:root {{ kubeinit_cluster_name }}-nexus -- keytool -importkeystore -srckeystore keystore.jks -srcstorepass password -destkeystore keystore.jks -deststoretype pkcs12
  register: _result
  changed_when: "_result.rc == 0"

- name: Copy keystore file
  ansible.builtin.command: buildah run --user root:root {{ kubeinit_cluster_name }}-nexus -- keytool -export -alias {{ kubeinit_cluster_name }}-nexus -keystore keystore.jks -storepass password -rfc -file public.cert
  register: _result
  changed_when: "_result.rc == 0"

- name: Copy keystore file
  ansible.builtin.command: buildah run --user root:root {{ kubeinit_cluster_name }}-nexus -- cp keystore.jks public.cert /nexus-data/etc/ssl/
  register: _result
  changed_when: "_result.rc == 0"

- name: Link keystore file to alternate location
  ansible.builtin.command: buildah run --user root:root {{ kubeinit_cluster_name }}-nexus -- ln -s /nexus-data/etc/ssl/keystore.jks /opt/sonatype/nexus/etc/ssl/keystore.jks
  register: _result
  changed_when: "_result.rc == 0"

- name: Run script to update properties
  ansible.builtin.command: buildah run --user root:root {{ kubeinit_cluster_name }}-nexus -- bash /nexus-data/update-props.sh
  register: _result
  changed_when: "_result.rc == 0"

- name: Set owner of nexus data to nexus
  ansible.builtin.command: buildah run --user root:root {{ kubeinit_cluster_name }}-nexus -- chown -R nexus:nexus /nexus-data
  register: _result
  changed_when: "_result.rc == 0"

- name: Commit the container image
  ansible.builtin.command: buildah commit {{ kubeinit_cluster_name }}-nexus kubeinit/{{ kubeinit_cluster_name }}-nexus:latest
  register: _result
  changed_when: "_result.rc == 0"

- name: Remove the buildah container
  ansible.builtin.command: buildah rm {{ kubeinit_cluster_name }}-nexus
  register: _result
  changed_when: "_result.rc == 0"

- name: Create a podman volume for nexus data
  containers.podman.podman_volume:
    name: "{{ kubeinit_cluster_name }}-nexus-data"
    state: present
    recreate: yes

- name: Set nexus as owner of the volume root
  containers.podman.podman_container:
    name: "{{ kubeinit_nexus_service_name }}-set-owner"
    image: kubeinit/{{ kubeinit_cluster_name }}-nexus:latest
    state: started
    detach: no
    remove: yes
    user: root
    command: chown nexus:nexus /mnt
    volumes:
      - "{{ kubeinit_cluster_name }}-nexus-data:/mnt"

- name: Copy data into nexus-data volume
  containers.podman.podman_container:
    name: "{{ kubeinit_nexus_service_name }}-copy-data"
    image: kubeinit/{{ kubeinit_cluster_name }}-nexus:latest
    state: started
    detach: no
    remove: yes
    command: cp -pr /mnt/etc /nexus-data/
    volumes:
      - "{{ kubeinit_cluster_name }}-nexus-data:/nexus-data"
      - "{{ kubeinit_nexus_directory_data }}:/mnt"

- name: Create a podman container to serve nexus
  containers.podman.podman_container:
    name: "{{ kubeinit_nexus_service_name }}"
    image: kubeinit/{{ kubeinit_cluster_name }}-nexus:latest
    pod: "{{ kubeinit_deployment_pod_name }}"
    state: stopped
    volumes:
      - "{{ kubeinit_cluster_name }}-nexus-data:/nexus-data"
      - "{{ kubeinit_services_data_volume }}:/var/kubeinit"
  register: _result_container_info

- name: Create systemd service for podman container
  ansible.builtin.include_role:
    name: kubeinit.kubeinit.kubeinit_services
    tasks_from: create_managed_service.yml
    public: true
  vars:
    kubeinit_services_systemd_service_name: "{{ kubeinit_nexus_service_name }}"
    kubeinit_services_podman_container_name: "{{ _result_container_info.container.Name }}"
    kubeinit_services_podman_container_pidfile: "{{ _result_container_info.container.ConmonPidFile }}"

- name: Clear temp facts
  ansible.builtin.set_fact:
    _result_container_info: null

- name: Wait for service to be available
  ansible.builtin.shell: |
    set -eo pipefail
    while [[ "$(curl --cacert {{ kubeinit_nexus_directory_data }}/etc/ssl/public.cert -s -o /dev/null -w '%{http_code}' https://{{ kubeinit_nexus_service_address }}:8443)" != "200" ]]; do sleep 5; done
  args:
    executable: /bin/bash
  register: _result
  changed_when: "_result.rc == 0"

- name: Copy out admin password
  ansible.builtin.command: |
    podman cp {{ kubeinit_cluster_name }}-nexus:/nexus-data/admin.password "{{ kubeinit_nexus_directory_data }}/admin.password"
  register: _result
  changed_when: "_result.rc == 0"

- name: Read admin password into a var
  ansible.builtin.slurp:
    src: "{{ kubeinit_nexus_directory_data }}/admin.password"
  register: _result_admin_password

- name: Setup server using nexus3 cli
  block:
    - name: Install the nexus3 cli
      ansible.builtin.command: |
        python3 -m pip install -q cryptography==3.3.2 nexus3-cli

    - name: Login to nexus3 cli
      ansible.builtin.command: |
        env LC_ALL=C.UTF-8 LANG=C.UTF-8 nexus3 login -u admin -p {{ _result_admin_password.content | b64decode }} -U "https://{{ kubeinit_nexus_service_address }}:8443" --x509_verify
      no_log: true

    - name: Create docker repository
      ansible.builtin.command: |
        env LC_ALL=C.UTF-8 LANG=C.UTF-8 REQUESTS_CA_BUNDLE="{{ kubeinit_nexus_directory_data }}/etc/ssl/public.cert" nexus3 repository create hosted docker --https-port {{ kubeinit_nexus_port }} --v1-enabled origin

    - name: Activate security realm for docker tokens
      ansible.builtin.command: |
        env LC_ALL=C.UTF-8 LANG=C.UTF-8 REQUESTS_CA_BUNDLE="{{ kubeinit_nexus_directory_data }}/etc/ssl/public.cert" nexus3 security realm activate DockerToken

  delegate_to: "{{ kubeinit_nexus_service_address }}"
