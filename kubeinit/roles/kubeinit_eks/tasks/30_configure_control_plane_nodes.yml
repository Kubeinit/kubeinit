---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Configure the master nodes
  block:
    - name: Install root public from service node in master nodes
      ansible.builtin.shell: |
        echo "{{ kubeinit_provision_service_public_key }}" >> ~/.ssh/authorized_keys
      changed_when: false

    # Push the certificates from the registry to the master nodes if its enabled
    - name: Push the certificates from the registry (service node) to the master nodes
      ansible.builtin.shell: |
        set -e
        scp -o StrictHostKeyChecking=no /etc/pki/ca-trust/source/anchors/* {{ kubeinit_deployment_node_name }}:/etc/pki/ca-trust/source/anchors/
      register: install_all_certs_in_masters
      changed_when: "install_all_certs_in_masters.rc == 0"
      when: "'registry' in hostvars[groups['service_nodes'][0]].services"
      delegate_to: "{{ kubeinit_registry_service_address }}"

    - name: Insert the local registry auth details
      ansible.builtin.shell: |
        set -e

        mkdir -p .docker
        cat << EOF > .docker/config.json
        {
          "auths": {{ disconnected_auth }},
          "HttpHeaders": {
            "User-Agent": "Docker-Client/18.09.7 (linux)"
          }
        }
        EOF
      register: insert_master_local_registry_auth
      changed_when: "insert_master_local_registry_auth.rc == 0"
      when: "'registry' in hostvars[groups['service_nodes'][0]].services"

    - name: Update the CA certs files
      ansible.builtin.command: update-ca-trust extract
      register: update_master_ca_trust_files
      changed_when: "update_master_ca_trust_files.rc == 0"
      when: "'registry' in hostvars[groups['service_nodes'][0]].services"

    ##
    ## Setup the first master node
    ##

    - name: Get etcd tag
      ansible.builtin.shell: |
        set -o pipefail
        curl -v --silent --user {{ kubeinit_registry_user }}:{{ kubeinit_registry_password }} https://{{ kubeinit_registry_uri }}/v2/etcd/tags/list --stderr - | grep '"name":"etcd"' | jq .tags[0]
      args:
        executable: /bin/bash
      register: eks_etcd_tag
      changed_when: "eks_etcd_tag.rc == 0"
      when: groups['all_control_plane_nodes'][0] in kubeinit_deployment_node_name

    - name: Register the eks etcd service deployment tag
      ansible.builtin.set_fact:
        kubeinit_eks_etcd_tag={{ eks_etcd_tag.stdout }}
      when: groups['all_control_plane_nodes'][0] in kubeinit_deployment_node_name

    - name: Clean kubeadm and initializing Kubernetes cluster
      ansible.builtin.shell: |
        set -o pipefail
        kubeadm reset -f || true

        kubeadm config images list
        kubeadm config images list --image-repository {{ kubeinit_registry_uri }}
        kubeadm config images list --kubernetes-version latest
        # kubeadm config images pull --image-repository {{ kubeinit_registry_uri }}

        cat << EOF > ~/config.yml
        apiVersion: kubeadm.k8s.io/v1beta1
        kind: ClusterConfiguration
        etcd:
          local:
            imageRepository: "{{ kubeinit_registry_uri }}"
            imageTag: {{ kubeinit_eks_etcd_tag }}
        # certificatesDir: "/etc/pki/ca-trust/source/anchors"
        controlPlaneEndpoint: "api.{{ kubeinit_inventory_cluster_name }}.{{ kubeinit_inventory_cluster_domain }}:6443"
        kubernetesVersion: "v{{ kubeinit_eks_kubernetes_version }}"
        networking:
          serviceSubnet: "{{ kubeinit_eks_service_network_cidr }}"
          podSubnet: "{{ kubeinit_eks_pod_network_cidr }}"
        EOF

        cd
        kubeadm init  --upload-certs  --config=config.yml

        #kubeadm init \
        #    --image-repository {{ kubeinit_registry_uri }} \
        #    --kubernetes-version {{ kubeinit_eks_kubernetes_version }} \
        #    --control-plane-endpoint "api.{{ kubeinit_inventory_cluster_name }}.{{ kubeinit_inventory_cluster_domain }}:6443" \
        #    --upload-certs \
        #    --pod-network-cidr={{ kubeinit_eks_pod_network_cidr }}
      args:
        executable: /bin/bash
      register: eks_master_kubeadm_master_init_output
      changed_when: "eks_master_kubeadm_master_init_output.rc == 0"
      when: groups['all_control_plane_nodes'][0] in kubeinit_deployment_node_name

    - name: Debug
      ansible.builtin.debug: var=eks_master_kubeadm_master_init_output

    - name: Get the master join key
      ansible.builtin.set_fact:
        eks_master_kubeadm_init_master_join_key: "{{ item }}"
      when: >
        groups['all_control_plane_nodes'][0] in kubeinit_deployment_node_name and
        '--control-plane --certificate-key' in item
      with_items:
        - "{{ eks_master_kubeadm_master_init_output.stdout_lines }}"

    - name: Debug
      ansible.builtin.debug: var=eks_master_kubeadm_init_master_join_key

    # This task will copy the join key across all the master nodes
    - name: Storing the master join key to add the other master nodes.
      ansible.builtin.copy:
        content: "{{ eks_master_kubeadm_init_master_join_key }}"
        dest: ~/eks_master_join_key
        mode: '0644'
      when: groups['all_control_plane_nodes'] | length > 1

    - name: Create kube directory
      ansible.builtin.file:
        path: ~/.kube
        state: directory
        mode: '0644'
      when: groups['all_control_plane_nodes'][0] in kubeinit_deployment_node_name

    - name: Copying required files
      ansible.builtin.shell: |
       sudo cp -f /etc/kubernetes/admin.conf ~/.kube/config
       sudo chown $(id -u):$(id -g) ~/.kube/config
      changed_when: false
      when: groups['all_control_plane_nodes'][0] in kubeinit_deployment_node_name

    - name: Get the join command
      ansible.builtin.shell: |
        #TODO:FIXME: Check warnings in the output
        kubeadm token create --print-join-command
      register: eks_master_kubeadm_init_output_aux
      changed_when: "eks_master_kubeadm_init_output_aux.rc == 0"
      when: groups['all_control_plane_nodes'][0] in kubeinit_deployment_node_name

    - name: Register the join command for other nodes
      ansible.builtin.set_fact:
        eks_master_kubeadm_init_output={{ eks_master_kubeadm_init_output_aux.stdout }}
      when: groups['all_control_plane_nodes'][0] in kubeinit_deployment_node_name

    - name: Debug
      ansible.builtin.debug: var=eks_master_kubeadm_init_output

    # This needs to be stored in all the master nodes
    - name: Storing the join cluster command token.
      ansible.builtin.copy:
        content: "{{ eks_master_kubeadm_init_output }}"
        dest: ~/eks_token
        mode: '0644'
      when: groups['all_control_plane_nodes'] | length > 1

    - name: Install Network Add-on
      ansible.builtin.command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      changed_when: false
      when: groups['all_control_plane_nodes'][0] in kubeinit_deployment_node_name

    ##
    ## Execute to configure all the other master nodes
    ##

    - name: Joining aditional master nodes using the PK
      ansible.builtin.shell: |
       kubeadm reset -f || true
       sed "s/$/{{ eks_master_kubeadm_init_master_join_key }}/g" eks_token > ~/eks_master_join_command.sh
       sh eks_master_join_command.sh
      changed_when: false
      when: groups['all_control_plane_nodes'] | length > 1 and groups['all_control_plane_nodes'][0] not in kubeinit_deployment_node_name

    - name: Create kube directory
      ansible.builtin.file:
        path: ~/.kube
        state: directory
        mode: '0777'
      when: groups['all_control_plane_nodes'] | length > 1 and groups['all_control_plane_nodes'][0] not in kubeinit_deployment_node_name

    - name: Copying required files
      ansible.builtin.shell: |
       sudo cp -f /etc/kubernetes/admin.conf ~/.kube/config
       sudo chown $(id -u):$(id -g) ~/.kube/config
      changed_when: false
      when: groups['all_control_plane_nodes'] | length > 1 and groups['all_control_plane_nodes'][0] not in kubeinit_deployment_node_name

  delegate_to: "{{ hostvars[kubeinit_deployment_node_name].ansible_host }}"
