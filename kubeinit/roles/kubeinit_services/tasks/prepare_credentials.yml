---
# Copyright 2020 KubeInit.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


- name: Gather the package facts
  ansible.builtin.package_facts:
  delegate_to: localhost

- name: Install podman if required
  ansible.builtin.package:
    state: present
    name: "podman"
  delegate_to: localhost
  when: "'podman' not in ansible_facts.packages"

- name: Ensure user specific systemd instance are persistent
  ansible.builtin.command: |
    loginctl enable-linger {{ kubeinit_service_user }}
  register: systemd_instance_persist
  changed_when: "systemd_instance_persist.rc == 0"

- name: Retrieve remote user runtime path
  ansible.builtin.command: |
    loginctl show-user {{ kubeinit_service_user }} -p RuntimePath --value
  register: systemd_runtime_path
  changed_when: "systemd_runtime_path.rc == 0"

- name: Enable and start podman.socket
  ansible.builtin.systemd:
    name: podman.socket
    enabled: yes
    state: started
    scope: user

- name: Start podman.service
  ansible.builtin.systemd:
    name: podman.service
    state: started
    scope: user

- name: Remove any existing ssh tunnel
  ansible.builtin.shell: |
    set -eo pipefail
    ssh -O exit -S "/root/.ssh/cm-%r@%h:%p" "{{ hostvars[kubeinit_deployment_node_name].ansible_host }}" || true
  args:
    executable: /bin/bash
  delegate_to: "{{ kubeinit_bastion_host_address }}"
  when: hostvars[kubeinit_deployment_node_name].type == 'virtual'

- name: Need an ssh tunnel from the service node to the bastion host
  ansible.builtin.command: |
    ssh -M -S "/root/.ssh/cm-%r@%h:%p" -N -f -L "{{ kubeinit_bastion_host_address }}:6222:{{ hostvars[kubeinit_deployment_node_name].ansible_host }}:22" "{{ hostvars[kubeinit_deployment_node_name].ansible_host }}"
  delegate_to: "{{ kubeinit_bastion_host_address }}"
  when: hostvars[kubeinit_deployment_node_name].type == 'virtual'

- name: Set ssh port to use
  ansible.builtin.set_fact:
    podman_remote_ssh_port: "{{ 6222 if (hostvars[kubeinit_deployment_node_name].type == 'virtual') else 22 }}"

- name: Get list of existing remote system connection definitions
  ansible.builtin.shell: |
    set -eo pipefail
    podman --remote system connection list | sed -e 1d -e 's/[* ].*//'
  args:
    executable: /bin/bash
  delegate_to: localhost
  register: list_remote_connections
  changed_when: "list_remote_connections.rc == 0"

- name: Remove any existing remote system connection definition for bastion hypervisor
  ansible.builtin.shell: |
    set -eo pipefail
    podman --remote system connection remove {{ item }}
  args:
    executable: /bin/bash
  delegate_to: localhost
  loop: "{{ list_remote_connections.stdout_lines | list }}"
  register: remove_remote_connection
  changed_when: "remove_remote_connection.rc == 0"

- name: Add remote system connection definition for bastion hypervisor
  ansible.builtin.command: |
    podman --remote system connection add "{{ kubeinit_deployment_node_name }}" --identity "~/.ssh/id_rsa" "ssh://{{ kubeinit_service_user }}@{{ kubeinit_bastion_host_address }}:{{ podman_remote_ssh_port }}{{ systemd_runtime_path.stdout }}/podman/podman.sock"
  delegate_to: localhost
  register: add_remote_connection
  changed_when: "add_remote_connection.rc == 0"

- name: Remove any previous credentials container
  containers.podman.podman_container:
    name: kubeinit-credentials
    state: absent

- name: Create services folders
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: '0700'
  with_items:
    - "/var/kubeinit/html"

- name: Create podman credentials container
  containers.podman.podman_container:
    name: kubeinit-credentials
    image: quay.io/centos/centos:stream8
    pod: "{{ kubeinit_deployment_node_name }}-pod"
    init: true
    cap_add:
      - "AUDIT_WRITE"
    volumes:
      - /var/kubeinit/:/var/kubeinit/
    command: sleep infinity

- name: Run dnf to bring container up to date
  ansible.builtin.command: podman exec kubeinit-credentials dnf update -y
  register: update_container_dnf
  changed_when: "update_container_dnf.rc == 0"

- name: Install python3
  ansible.builtin.command: podman exec kubeinit-credentials dnf install -y python3 openssh
  register: install_python
  changed_when: "install_python.rc == 0"

- name: Add remote container to hosts
  ansible.builtin.add_host:
    hostname: kubeinit-credentials
    ansible_connection: containers.podman.podman
    ansible_python_interpreter: /usr/bin/python3
    ansible_podman_extra_args: --remote

- name: Disable pipelining while using podman connector
  block:

    - name: Wait for connection to kubeinit-credentials container
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300

    - name: Make sure needed packages are installed
      ansible.builtin.package:
        state: present
        name: "{{ kubeinit_registry_required_packages | default([]) }}"

    - name: Install cryptography and passlib
      ansible.builtin.shell: |
        set -o pipefail
        python3 -m pip install cryptography==3.3.2 passlib
      args:
        executable: /bin/bash
      register: install_passlib
      changed_when: "install_passlib.rc == 0"

    - name: Create directory to hold the registry files
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ kubeinit_service_user }}"
        group: "{{ kubeinit_service_user }}"
        mode: u=rwX,g=rX,o=rX
        recurse: yes
      with_items:
        - "{{ kubeinit_registry_directory_auth }}"
        - "{{ kubeinit_registry_directory_cert }}"
        - "{{ kubeinit_registry_directory_data }}"

    - name: Generate the htpasswd entry
      community.general.htpasswd:
        path: "{{ kubeinit_registry_directory_auth }}/htpasswd"
        name: "{{ kubeinit_registry_user }}"
        password: "{{ kubeinit_registry_password }}"
        owner: "{{ kubeinit_service_user }}"
        group: "{{ kubeinit_service_user }}"
        crypt_scheme: "bcrypt"
        mode: '0755'
      no_log: true

    - name: Set disconnected_auth
      ansible.builtin.set_fact:
        disconnected_registry_up: "{{ kubeinit_registry_user }}:{{ kubeinit_registry_password }}"
      no_log: true

    - name: Create registry auth for pullsecret
      ansible.builtin.set_fact:
        # The spaces after the first single quote is required, do not remove
        # Something in Ansible appears to be recognizing this as valid Python,
        # so it's getting transformed into a Python list and then serialized
        # using Python's str(), which is why we end up with the single-quoted values.
        disconnected_auth: '  {"{{ kubeinit_registry_uri }}": {"auth": "{{ disconnected_registry_up | b64encode }}" } }'
      no_log: true

    - name: Append auths to pullsecret
      ansible.builtin.shell: |
        set -o pipefail
        echo '{{ kubeinit_registry_pullsecret }}' | jq -c \
          '.auths += {{ disconnected_auth }}'
      args:
        executable: /bin/bash
      register: new_pullsecret
      changed_when: "new_pullsecret.rc == 0"

    - name: Override final kubeinit_registry_pullsecret with both auths
      ansible.builtin.set_fact:
        kubeinit_registry_pullsecret: '  {{ new_pullsecret.stdout }}'

    - name: Debug the creds dictionary
      ansible.builtin.debug:
        var: kubeinit_registry_pullsecret

    - name: Write auth for disconnected registry auth details
      ansible.builtin.copy:
        content: '  {{ kubeinit_registry_pullsecret }}'
        dest: "~/{{ kubeinit_registry_auth_file }}"
        mode: '0755'
        backup: yes
        force: yes

    - name: Generate an OpenSSL private key
      community.crypto.openssl_privatekey:
        path: "{{ kubeinit_registry_directory_cert }}/domain.key"

    - name: Generate an OpenSSL CSR
      community.crypto.openssl_csr:
        path: "{{ kubeinit_registry_directory_cert }}/domain.csr"
        privatekey_path: "{{ kubeinit_registry_directory_cert }}/domain.key"
        common_name: "{{ kubeinit_registry_fqdn }}"
        country_name: "{{ kubeinit_common_certificate_country }}"
        state_or_province_name: "{{ kubeinit_common_certificate_state }}"
        locality_name: "{{ kubeinit_common_certificate_locality }}"
        organization_name: "{{ kubeinit_common_certificate_organization }}"
        organizational_unit_name: "{{ kubeinit_common_certificate_organizational_unit }}"
        basic_constraints_critical: yes
        create_subject_key_identifier: yes
        basic_constraints: ['CA:TRUE']
        subject_alt_name: "{{ item.value | map('regex_replace', '^', 'DNS:') | list }}"
      with_dict:
        dns_server:
          - "{{ kubeinit_registry_host }}"
          - "{{ kubeinit_registry_fqdn }}"
          - "{{ kubeinit_registry_fqdn_alt }}"

    - name: Generate a selfsigned OpenSSL CA Certificate
      community.crypto.x509_certificate:
        path: "{{ kubeinit_registry_directory_cert }}/domainCA.crt"
        privatekey_path: "{{ kubeinit_registry_directory_cert }}/domain.key"
        csr_path: "{{ kubeinit_registry_directory_cert }}/domain.csr"
        provider: selfsigned

    - name: Generate an ownca OpenSSL Certificate
      community.crypto.x509_certificate:
        path: "{{ kubeinit_registry_directory_cert }}/domain.crt"
        ownca_privatekey_path: "{{ kubeinit_registry_directory_cert }}/domain.key"
        csr_path: "{{ kubeinit_registry_directory_cert }}/domain.csr"
        ownca_path: "{{ kubeinit_registry_directory_cert }}/domainCA.crt"
        ownca_create_authority_key_identifier: yes
        provider: ownca

    - name: Read in the contents of domain.crt
      ansible.builtin.slurp:
        src: "{{ kubeinit_registry_directory_cert }}/domain.crt"
      register: domain_cert_b64

    - name: Set trustbundle fact to contents of domain.crt
      ansible.builtin.set_fact:
        trustbundle: "{{ domain_cert_b64.content | string | b64decode }}"

    #
    # The root user of the provision service container will be given the private
    # ssh key which will allow remote ssh access to the nodes in the cluster.
    # We will create those keys here and place them when those nodes are created.
    #

    - name: Render root keys for the provision service
      ansible.builtin.shell: |
        set -eo pipefail
        mkdir -p /var/kubeinit/provision/.ssh
        ssh-keygen -t rsa -N "" -f /var/kubeinit/provision/.ssh/id_rsa <<< y
      args:
        executable: /bin/bash
      register: render_service_keys
      changed_when: "render_service_keys.rc == 0"

    - name: Get root service machine public key
      ansible.builtin.command: cat /var/kubeinit/provision/.ssh/id_rsa.pub
      register: public_key_service_content
      changed_when: "public_key_service_content.rc == 0"

    - name: Register the public key of the provision service
      ansible.builtin.set_fact:
        kubeinit_provision_service_public_key={{ public_key_service_content.stdout }}

  vars:
    ansible_ssh_pipelining: False
  delegate_to: kubeinit-credentials

- name: Delegate to kubeinit_deployment_node_name
  block:

    - name: Wait for connection to {{ kubeinit_deployment_node_name }}
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300

    - name: Copy kubeinit provisioner secrets into provisioner container
      ansible.builtin.copy:
        src: /var/kubeinit/provision/.ssh/
        dest: /root/.ssh/
        remote_src: true
        mode: preserve

    - name: Create registry auth pullsecret file
      ansible.builtin.copy:
        content: "{{ kubeinit_registry_pullsecret }}"
        dest: "{{ kubeinit_service_user_dir }}/{{ kubeinit_registry_auth_file }}"
        group: "{{ kubeinit_service_user }}"
        owner: "{{ kubeinit_service_user }}"
        mode: '0644'
        force: yes

    - name: Copy trustbundle into services container
      ansible.builtin.copy:
        content: "{{ trustbundle }}"
        dest: "{{ kubeinit_service_user_dir }}/domain.crt"
        group: "{{ kubeinit_service_user }}"
        owner: "{{ kubeinit_service_user }}"
        mode: '0644'
        force: yes

    - name: Copy cert to pki directory
      ansible.builtin.copy:
        content: "{{ trustbundle }}"
        dest: /etc/pki/ca-trust/source/anchors/domain.crt
        remote_src: yes
        group: "{{ kubeinit_service_user }}"
        owner: "{{ kubeinit_service_user }}"
        mode: 0644
        force: yes
        backup: yes
      when: hostvars[kubeinit_deployment_node_name].os == 'centos'

    - name: Copy cert to pki directory
      ansible.builtin.copy:
        content: "{{ trustbundle }}"
        dest: /usr/local/share/ca-certificates/domain.crt
        remote_src: yes
        group: "{{ kubeinit_service_user }}"
        owner: "{{ kubeinit_service_user }}"
        mode: 0644
        force: yes
        backup: yes
      when: hostvars[kubeinit_deployment_node_name].os == 'ubuntu' or hostvars[kubeinit_deployment_node_name].os == 'debian'

    - name: Install all certs in ubuntu
      ansible.builtin.shell: |
        set -e
        mkdir -p /usr/local/share/ca-certificates/kubeinit/
        openssl x509 -inform PEM -in {{ kubeinit_registry_directory_cert }}/domainCA.crt > {{ kubeinit_registry_directory_cert }}/domainCA.pem
        cp {{ kubeinit_registry_directory_cert }}/* /usr/local/share/ca-certificates/kubeinit/
      register: install_all_certs
      changed_when: "install_all_certs.rc == 0"
      when: hostvars[kubeinit_deployment_node_name].os == 'ubuntu' or hostvars[kubeinit_deployment_node_name].os == 'debian'

    - name: Update the CA trust files
      ansible.builtin.command: update-ca-trust extract
      register: update_ca_trust_files
      changed_when: "update_ca_trust_files.rc == 0"
      when: hostvars[kubeinit_deployment_node_name].os == 'centos'

    - name: Update the CA trust files
      ansible.builtin.command: update-ca-certificates
      register: update_ca_certs
      changed_when: "update_ca_certs.rc == 0"
      when: hostvars[kubeinit_deployment_node_name].os == 'ubuntu' or hostvars[kubeinit_deployment_node_name].os == 'debian'

  delegate_to: "{{ hostvars[kubeinit_deployment_node_name].ansible_host }}"
