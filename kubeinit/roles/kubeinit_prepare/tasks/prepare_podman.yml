---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

#
# We should already have podman in all the distro repos we use.
#

#- name: Install common requirements
#  ansible.builtin.package:
#    name: "{{ kubeinit_prepare_podman_dependencies }}"
#    state: present

#
# Currently there are two ways of configuring
# the docker.io credentials using the variable
# kubeinit_common_docker_password
#
# If the kubeinit_common_docker_password variable
# is the path of the file containing the password
# we get the password from that file, and in the case
# this path do not exists, then we asume that the
# variable contains the password itself.
#

- name: Authenticate with docker username/password if defined
  block:

    - name: Set facts for dockerhub secrets if running from container
      ansible.builtin.set_fact:
        _result_username_secret: "{{ omit if (hostvars[kubeinit_secrets_name].secrets[dockerhub_username_secret] | default('') | length == 0) else hostvars[kubeinit_secrets_name].secrets[dockerhub_username_secret] }}"
        _result_password_secret: "{{ omit if (hostvars[kubeinit_secrets_name].secrets[dockerhub_password_secret] | default('') | length == 0) else hostvars[kubeinit_secrets_name].secrets[dockerhub_password_secret] }}"
      no_log: true
      when: kubeinit_facts_hostvars.container_run|bool

    - name: Check for password from a file if not in container
      block:

        - name: Check if kubeinit_common_docker_password path exists
          ansible.builtin.stat:
            path: "{{ kubeinit_common_docker_password }}"
          register: _result_passwordfile
          delegate_to: localhost
          no_log: true

        - name: Read docker password from file when the variable contains a path
          ansible.builtin.slurp:
            src: "{{ kubeinit_common_docker_password }}"
          register: _result_password
          delegate_to: localhost
          no_log: true
          when: _result_passwordfile.stat.exists

        - name: Set password secret
          ansible.builtin.set_fact:
            _result_password_secret: "{{ _result_password_secret if (_result_password_secret is defined) else _result_password.content }}"
          when: _result_passwordfile.stat.exists

      when: not kubeinit_facts_hostvars.container_run|bool

    - name: Podman login to docker.io
      containers.podman.podman_login:
        username: "{{ (_result_username_secret | b64decode | trim) if (_result_username_secret is defined) else kubeinit_common_docker_username }}"
        password: "{{ (_result_password_secret | b64decode | trim) if (_result_password_secret is defined) else kubeinit_common_docker_password }}"
        registry: "docker.io"
      no_log: true

    - name: Clear any reference to docker password
      ansible.builtin.set_fact:
        _result_username_secret: null
        _result_password_secret: null
        _result_password: null
        _result_passwordfile: null
      no_log: true

  when: |
    kubeinit_common_docker_username is defined and
    kubeinit_common_docker_password is defined and
    kubeinit_common_docker_username and
    kubeinit_common_docker_password
