---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- block:
    - name: Gather hypervisor facts if needed
      ansible.builtin.include_tasks: prepare_hypervisors.yml
      vars:
        hypervisors_prepared: "{{ kubeinit_facts_name is defined }}"
      when: not hypervisors_prepared

    - name: Add task-prepare-hypervisors to tasks_completed
      ansible.builtin.add_host:
        name: "{{ kubeinit_facts_name }}"
        tasks_completed: "{{ hostvars[kubeinit_facts_name].tasks_completed | union(['task-prepare-hypervisors']) }}"

    - block:
        - name: Stop after 'task-prepare-hypervisors' when requested
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in hostvars[kubeinit_facts_name].tasks_completed

    - block:
        - name: "Stop before 'task-prepare-environment' when requested"
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_before_task is defined and kubeinit_stop_before_task == 'task-prepare-environment'
  tags: omit_from_grapher

- name: Define kubeinit_facts_hostvars
  ansible.builtin.set_fact:
    kubeinit_facts_hostvars: "{{ hostvars[kubeinit_facts_name] }}"

- name: Define cluster fact names needed to prepare groups
  ansible.builtin.set_fact:
    kubeinit_cluster_distro: "{{ hostvars[kubeinit_cluster_facts_name].distro }}"
    kubeinit_cluster_bastion_name:
      "{{ 'bastion' if (('bastion_host' not in groups) or ((groups['bastion_host'] | list | length) == 0)) else groups['bastion_host'][0] }}"
    kubeinit_cluster_ovn_central_name:
      "{{ 'ovn-central' if (('ovn_central_host' not in groups) or ((groups['ovn_central_host'] | list | length) == 0)) else groups['ovn_central_host'][0] }}"
  loop: "{{ ['localhost'] | union(hostvars[kubeinit_cluster_facts_name].hypervisors) }}"
  delegate_to: "{{ item }}"

- name: Prepare groups
  ansible.builtin.include_tasks: prepare_groups.yml

- name: Define group facts
  ansible.builtin.set_fact:
    kubeinit_cluster_hostvars: "{{ hostvars[kubeinit_cluster_facts_name] }}"
    kubeinit_bastion_host: "{{ hostvars[kubeinit_cluster_bastion_name].target }}"
    kubeinit_ovn_central_host: "{{ hostvars[kubeinit_cluster_ovn_central_name].target }}"
    kubeinit_first_controller_node: "{{ groups['all_controller_nodes'][0] }}"
    kubeinit_hypervisor_count: "{{ hostvars[kubeinit_cluster_facts_name].hypervisors | length }}"
    kubeinit_controller_count: "{{ groups['all_controller_nodes'] | length }}"
    kubeinit_compute_count: "{{ groups['all_compute_nodes'] | default([]) | length }}"
    kubeinit_cluster_node_count: "{{ groups['all_cluster_nodes'] | default([]) | length }}"
  loop: "{{ ['localhost'] | union(hostvars[kubeinit_cluster_facts_name].hypervisors) }}"
  delegate_to: "{{ item }}"

- name: Install podman if required
  ansible.builtin.package:
    state: present
    name: "podman"
  when: not hostvars['localhost'].podman_is_installed

- name: Define service node facts
  ansible.builtin.set_fact:
    kubeinit_apache_service_name: "{{ kubeinit_cluster_name }}-apache"
    kubeinit_bind_service_name: "{{ kubeinit_cluster_name }}-bind"
    kubeinit_dnsmasq_service_name: "{{ kubeinit_cluster_name }}-dnsmasq"
    kubeinit_haproxy_service_name: "{{ kubeinit_cluster_name }}-haproxy"
    kubeinit_nexus_service_name: "{{ kubeinit_cluster_name }}-nexus"
    kubeinit_provision_service_name: "{{ kubeinit_cluster_name }}-provision"
    kubeinit_registry_service_name: "{{ kubeinit_cluster_name }}-registry"
    kubeinit_apache_service_node: "{{ kubeinit_cluster_hostvars.services['apache'] | default(None) }}"
    kubeinit_bind_service_node: "{{ kubeinit_cluster_hostvars.services['bind'] | default(None) }}"
    kubeinit_dnsmasq_service_node: "{{ kubeinit_cluster_hostvars.services['dnsmasq'] | default(None) }}"
    kubeinit_haproxy_service_node: "{{ kubeinit_cluster_hostvars.services['haproxy'] | default(None) }}"
    kubeinit_nexus_service_node: "{{ kubeinit_cluster_hostvars.services['nexus'] | default(None) }}"
    kubeinit_provision_service_node: "{{ kubeinit_cluster_hostvars.services['provision'] }}"
    kubeinit_registry_service_node: "{{ kubeinit_cluster_hostvars.services['registry'] | default(None) }}"
  loop: "{{ ['localhost'] | union(hostvars[kubeinit_cluster_facts_name].hypervisors) }}"
  delegate_to: "{{ item }}"

- name: Gather facts from bastion host if it is not a hypervisor host
  block:

    - block:
        - name: Gather facts from bastion_host if needed
          ansible.builtin.include_tasks: gather_host_facts.yml
          vars:
            _param_gather_host: "{{ kubeinit_bastion_host }}"
      tags: omit_from_grapher

    - name: Generate an OpenSSH keypair bastion host
      community.crypto.openssh_keypair:
        path: "~/.ssh/{{ kubeinit_cluster_name }}_id_{{ kubeinit_common_ssh_keytype }}"
        type: "{{ kubeinit_common_ssh_keytype }}"
        comment: "{{ kubeinit_cluster_name }} {{ kubeinit_bastion_host }}"
        regenerate: 'never'
      register: _result_bastion_keypair
      delegate_to: "{{ kubeinit_bastion_host }}"

    - name: Set authorized_key hostvar for bastion host
      ansible.builtin.add_host:
        name: "{{ kubeinit_bastion_host }}"
        authorized_key: "{{ _result_bastion_keypair.public_key + ' ' + _result_bastion_keypair.comment }}"

    - name: Add bastion host authorized key to cluster authorized_keys
      ansible.builtin.set_fact:
        authorized_keys_with_bastion: "{{ kubeinit_cluster_hostvars.authorized_keys | union([hostvars[kubeinit_bastion_host].authorized_key]) }}"

    - name: Set all cluster hypervisors fact
      ansible.builtin.add_host:
        name: "{{ kubeinit_cluster_facts_name }}"
        authorized_keys: "{{ authorized_keys_with_bastion }}"

    - name: Update kubeinit_cluster_hostvars
      ansible.builtin.set_fact:
        kubeinit_cluster_hostvars: "{{ hostvars[kubeinit_cluster_facts_name] }}"

  when: kubeinit_bastion_host not in groups['all_hosts']

- name: Add all cluster authorized keys to all hypervisors
  ansible.posix.authorized_key:
    user: root
    key: "{{ authorized_key }}"
    state: present
  loop: "{{ groups['all_hosts'] | product(kubeinit_cluster_hostvars.authorized_keys) | list }}"
  vars:
    host: "{{ item[0] }}"
    authorized_key: "{{ item[1] }}"
  delegate_to: "{{ host }}"

- name: Define additional host, node and services facts
  ansible.builtin.set_fact:
    kubeinit_bastion_host_address: "{{ hostvars[kubeinit_bastion_host].ssh_connection_address }}"
    kubeinit_apache_service_address: "{{ hostvars[kubeinit_apache_service_node].ansible_host | default(None) }}"
    kubeinit_bind_service_address: "{{ hostvars[kubeinit_bind_service_node].ansible_host | default(None) }}"
    kubeinit_dnsmasq_service_address: "{{ hostvars[kubeinit_dnsmasq_service_node].ansible_host | default(None) }}"
    kubeinit_haproxy_service_address: "{{ hostvars[kubeinit_haproxy_service_node].ansible_host | default(None) }}"
    kubeinit_nexus_service_address: "{{ hostvars[kubeinit_nexus_service_node].ansible_host | default(None) }}"
    kubeinit_provision_service_address: "{{ hostvars[kubeinit_provision_service_node].ansible_host }}"
    kubeinit_registry_service_address: "{{ hostvars[kubeinit_registry_service_node].ansible_host | default(None) }}"
    kubeinit_service_user: "root"
    kubeinit_service_user_dir: "/root"
    kubeinit_ingress_hostname: "ingress"
    kubeinit_bind_volume_name: "{{ kubeinit_bind_service_name }}-config"
    kubeinit_nexus_port: "5001"
    kubeinit_nexus_fqdn: "{{ kubeinit_nexus_service_node }}.{{ kubeinit_cluster_fqdn }}"
    kubeinit_nexus_fqdn_alt: "nexus.{{ kubeinit_cluster_fqdn }}"
    kubeinit_nexus_uri: "{{ kubeinit_nexus_service_node }}.{{ kubeinit_cluster_fqdn }}:5001"
    kubeinit_registry_port: "5000"
    kubeinit_registry_fqdn: "{{ kubeinit_registry_service_node }}.{{ kubeinit_cluster_fqdn }}"
    kubeinit_registry_fqdn_alt: "registry.{{ kubeinit_cluster_fqdn }}"
    kubeinit_registry_uri: "{{ kubeinit_registry_service_node }}.{{ kubeinit_cluster_fqdn }}:5000"
    kubeinit_services_data_volume: "{{ kubeinit_cluster_name }}-data"
  loop: "{{ ['localhost'] | union(hostvars[kubeinit_cluster_facts_name].hypervisors) }}"
  delegate_to: "{{ item }}"

- name: Add ssh ProxyCommand option for all nodes
  ansible.builtin.add_host:
    name: "{{ item }}"
    ansible_ssh_common_args: >-
      {{ ansible_ssh_common_args }} -i ~/.ssh/{{ kubeinit_cluster_name }}_id_{{ kubeinit_common_ssh_keytype }} -o ProxyCommand="ssh {{ ansible_ssh_common_args }} -i ~/.ssh/{{ kubeinit_cluster_name }}_id_{{ kubeinit_common_ssh_keytype }} -W %h:%p -q root@{{ hostvars[kubeinit_ovn_central_host].ansible_host }}"
  loop: "{{ groups['all_nodes'] }}"

- block:
    - name: Add task-prepare-environment to tasks_completed
      ansible.builtin.add_host:
        name: "{{ kubeinit_facts_name }}"
        tasks_completed: "{{ kubeinit_facts_hostvars.tasks_completed | union(['task-prepare-environment']) }}"

    - name: Update kubeinit_facts_hostvars
      ansible.builtin.set_fact:
        kubeinit_facts_hostvars: "{{ hostvars[kubeinit_facts_name] }}"

    - block:
        - name: Stop after 'task-prepare-environment' when requested
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in kubeinit_facts_hostvars.tasks_completed
  tags: omit_from_grapher
