---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- block:
    - block:
        - name: "Stop before 'task-gather-facts' when requested"
          ansible.builtin.add_host: name='kubeinit-facts' playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_before_task is defined and kubeinit_stop_before_task == 'task-gather-facts'
  tags: omit_from_grapher

#
# Gather kubeinit facts
#

- name: Set hostname we use to set kubeinit facts
  ansible.builtin.set_fact:
    kubeinit_facts_name: 'kubeinit-facts'

- name: Set hostname we use to set cluster facts
  ansible.builtin.set_fact:
    kubeinit_cluster_facts_name: 'kubeinit-cluster-facts'

- name: Add playbook context facts
  ansible.builtin.add_host:
    name: "{{ kubeinit_facts_name }}"
    container_run: "{{ kubeinit_container_run|default(false)|bool }}"

- name: Lookup remote_user from command-line
  ansible.builtin.set_fact:
    kubeinit_cli_remote_user: "{{ lookup('cli_args', 'remote_user') }}"

- name: Check for empty remote user when running from kubeinit container
  ansible.builtin.fail:
    msg:
      - "You must provide the user for the playbook when running from the kubeinit container."
      - "e.g. --user root"
  when: hostvars[kubeinit_facts_name].container_run and kubeinit_cli_remote_user|length == 0

- name: Define kubeinit_setup_remote_user
  ansible.builtin.add_host:
    name: "{{ kubeinit_facts_name }}"
    remote_user: "{{ kubeinit_cli_remote_user if (kubeinit_cli_remote_user|length > 0) else ansible_facts.user_id }}"

- name: Define kubeinit_facts_hostvars
  ansible.builtin.set_fact:
    kubeinit_facts_hostvars: "{{ hostvars[kubeinit_facts_name] }}"

- name: Set hostname we use to set kubeinit secrets
  ansible.builtin.set_fact:
    kubeinit_secrets_name: 'kubeinit-secrets'

- name: Read podman secrets if running from the container
  ansible.builtin.include_tasks: gather_kubeinit_secrets.yml
  when: kubeinit_facts_hostvars.container_run|bool

- name: Create .ssh folder if needed
  ansible.builtin.file:
    path: ~/.ssh
    state: directory
    mode: 0700
  when: kubeinit_facts_hostvars.container_run|bool

- name: Copy ssh key secret into ~/.ssh
  ansible.builtin.copy:
    content: "{{ hostvars[kubeinit_secrets_name].secrets[kubeinit_facts_hostvars.kubeinit_ssh_key_secret] | b64decode }}"
    dest: "~/.ssh/id_{{ kubeinit_common_ssh_keytype }}"
    mode: '0600'
  when: kubeinit_facts_hostvars.container_run|bool

- name: Load kubeinit_ssh_config_hosts_spec from yaml into a list of key=value lists if defined
  ansible.builtin.set_fact:
    ssh_config_hosts_list: "{{ kubeinit_ssh_config_hosts_spec | from_yaml }}"
  when: kubeinit_ssh_config_hosts_spec is defined

- name: Convert list of list into list of dictionary
  ansible.builtin.set_fact:
    ssh_config_hosts: "{{ (ssh_config_hosts | default([])) | union([_dict]) }}"
  loop: "{{ ssh_config_hosts_list }}"
  vars:
    _keys: "{{ item | map('regex_replace', '^(.*?)=(.*)$', '\\1') | trim }}"
    _vals: "{{ item | map('regex_replace', '^(.*?)=(.*)$', '\\2') | trim }}"
    _dict: "{{ dict(_keys|zip(_vals)) }}"
  when: ssh_config_hosts_list is defined

- name: Add host entries to ssh_config_hosts group
  ansible.builtin.add_host:
    name: "{{ item.host }}"
    groups: 'ssh_config_hosts'
    ssh_hostname: "{{ item.ssh_hostname }}"
  loop: "{{ ssh_config_hosts }}"
  when: ssh_config_hosts is defined

- name: Create ssh config file
  ansible.builtin.file:
    path: ~/.ssh/config
    state: touch
    mode: 0644
  when: kubeinit_facts_hostvars.container_run|bool and 'ssh_config_hosts' in groups and groups['ssh_config_hosts'] | list | length > 0

- name: Add ssh_config_hosts to ~/.ssh/config
  ansible.builtin.blockinfile:
    path: ~/.ssh/config
    mode: '0644'
    block: |
      {% for host in groups['ssh_config_hosts'] %}

      Host {{ host }}
        Hostname {{ hostvars[host].ssh_hostname }}
        IdentityFile ~/.ssh/id_{{ kubeinit_common_ssh_keytype }}
        UserKnownHostsFile /dev/null
        StrictHostKeyChecking accept-new
      {% endfor %}
  when: kubeinit_facts_hostvars.container_run|bool and 'ssh_config_hosts' in groups and groups['ssh_config_hosts'] | list | length > 0

- name: Prepare inventory using command-line specification
  ansible.builtin.set_fact:
    kubeinit_spec_parts: "{{ kubeinit_spec.split('-') | default([]) }}"

- name: Assert we have a minimum number of spec parts
  ansible.builtin.assert:
    msg: "Usage: -e kubeinit_spec=<distro>-<driver>-<controllers>-<computes>-<hypervisors>[-<ignored>]"
    that: kubeinit_spec_parts | length >= 5

- name: Set facts from spec parts
  ansible.builtin.set_fact:
    kubeinit_spec_distro: "{{ kubeinit_spec_parts[0] }}"
    kubeinit_spec_driver: "{{ kubeinit_spec_parts[1] }}"
    kubeinit_spec_controllers: "{{ kubeinit_spec_parts[2] }}"
    kubeinit_spec_computes: "{{ kubeinit_spec_parts[3] }}"
    kubeinit_spec_hypervisors: "{{ kubeinit_spec_parts[4] }}"

- name: Assert spec constraints
  ansible.builtin.assert:
    that:
      - kubeinit_spec_distro in ['cdk', 'eks', 'k8s', 'kid', 'okd', 'rke']
      - kubeinit_spec_driver in ['libvirt']
      - kubeinit_spec_controllers in ['1', '3', '5']
      - kubeinit_spec_computes|int >= 0
      - kubeinit_spec_computes|int <= 10
      - kubeinit_spec_hypervisors|int >= 0
      - kubeinit_spec_hypervisors|int <= (groups['hypervisor_hosts'] | length)

- name: Add kubeinit_spec facts to cluster facts
  ansible.builtin.add_host:
    name: "{{ kubeinit_cluster_facts_name }}"
    distro: "{{ kubeinit_spec_distro }}"
    controller_count: "{{ kubeinit_spec_controllers }}"
    compute_count: "{{ kubeinit_spec_computes }}"
    node_count: "{{ kubeinit_spec_controllers|int + kubeinit_spec_computes|int }}"
    hypervisors: "{{ groups['hypervisor_hosts'][0:kubeinit_spec_hypervisors|int] }}"

- name: Set cluster name fact from inventory and kubeinit_spec
  ansible.builtin.set_fact:
    kubeinit_cluster_name: "{{ kubeinit_inventory_cluster_name | default(kubeinit_spec_distro + 'cluster') }}"

- name: Set more cluster facts from inventory and kubeinit_spec
  ansible.builtin.set_fact:
    kubeinit_cluster_distro: "{{ kubeinit_spec_distro }}"
    kubeinit_cluster_fqdn: "{{ kubeinit_cluster_name }}.{{ kubeinit_inventory_cluster_domain }}"

- name: Add more facts to cluster facts
  ansible.builtin.add_host:
    name: "{{ kubeinit_cluster_facts_name }}"
    cluster_name: "{{ kubeinit_cluster_name }}"
    cluster_fqdn: "{{ kubeinit_cluster_fqdn }}"

- name: Get cluster facts from kubeinit_clusters group
  ansible.builtin.set_fact:
    kubeinit_fact_network_name: "{{ hostvars[kubeinit_cluster_name].network_name | default(kubeinit_inventory_network_name) }}"
    kubeinit_fact_post_deployment_services: "{{ hostvars[kubeinit_cluster_name].post_deployment_services | default(kubeinit_inventory_post_deployment_services) }}"

- name: Get network facts from kubeinit_networks group
  ansible.builtin.set_fact:
    kubeinit_fact_network: "{{ hostvars[kubeinit_fact_network_name].network | default(kubeinit_inventory_network) }}"
    kubeinit_fact_gateway_offset: "{{ hostvars[kubeinit_fact_network_name].gateway_offset | default(kubeinit_inventory_gateway_offset) }}"
    kubeinit_fact_nameserver_offset: "{{ hostvars[kubeinit_fact_network_name].nameserver_offset | default(kubeinit_inventory_nameserver_offset) }}"
    kubeinit_fact_dhcp_start_offset: "{{ hostvars[kubeinit_fact_network_name].dhcp_start_offset | default(kubeinit_inventory_dhcp_start_offset) }}"
    kubeinit_fact_dhcp_end_offset: "{{ hostvars[kubeinit_fact_network_name].dhcp_end_offset | default(kubeinit_inventory_dhcp_end_offset) }}"

- name: Set facts from inventory network
  ansible.builtin.set_fact:
    kubeinit_cluster_network_name: "{{ kubeinit_fact_network_name }}"
    kubeinit_cluster_network: "{{ kubeinit_fact_network | ansible.netcommon.ipv4('net') }}"
    kubeinit_cluster_prefix: "{{ kubeinit_fact_network | ansible.netcommon.ipv4('prefix') }}"
    kubeinit_cluster_netmask: "{{ kubeinit_fact_network | ansible.netcommon.ipv4('netmask') | ansible.netcommon.ipv4('address') }}"
    kubeinit_cluster_gateway: "{{ kubeinit_fact_network | ansible.netcommon.ipv4(kubeinit_fact_gateway_offset|int) | ansible.netcommon.ipv4('address') }}"
    kubeinit_cluster_nameserver: "{{ kubeinit_fact_network | ansible.netcommon.ipv4(kubeinit_fact_nameserver_offset|int) | ansible.netcommon.ipv4('address') }}"
    kubeinit_cluster_next_available: "{{ kubeinit_fact_network | ansible.netcommon.ipv4(kubeinit_fact_dhcp_start_offset|int) }}"

- name: Assert additional constraints
  ansible.builtin.assert:
    that:
      - kubeinit_cluster_prefix|int < 30

- name: Add cluster network facts to cluster facts
  ansible.builtin.add_host:
    name: "{{ kubeinit_cluster_facts_name }}"
    network_name: "{{ kubeinit_cluster_network_name }}"
    network: "{{ kubeinit_cluster_network }}"
    prefix: "{{ kubeinit_cluster_prefix }}"
    netmask: "{{ kubeinit_cluster_netmask }}"
    gateway: "{{ kubeinit_cluster_gateway }}"
    nameserver: "{{ kubeinit_cluster_nameserver }}"

- name: Assign controller_nodes addresses
  ansible.builtin.add_host:
    name: "{{ controller_node }}"
    group: ['controller_nodes', 'inventory_nodes']
    ansible_host: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipmath(ansible_loop.index0) | ansible.netcommon.ipv4('address') }}"
  loop: "{{ range(kubeinit_spec_controllers|int) | list }}"
  loop_control:
    extended: true
  vars:
    controller_node: "{{ kubeinit_inventory_controller_name_pattern | format(ansible_loop.index) }}"

- name: Update next available address for allocation
  ansible.builtin.set_fact:
    kubeinit_cluster_next_available: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipmath(kubeinit_spec_controllers|int) }}"

- name: Assign compute_nodes addresses
  ansible.builtin.add_host:
    name: "{{ compute_node }}"
    group: ['compute_nodes', 'inventory_nodes']
    ansible_host: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipmath(ansible_loop.index0) | ansible.netcommon.ipv4('address') }}"
  loop: "{{ range(kubeinit_spec_computes|int) | list }}"
  loop_control:
    extended: true
  vars:
    compute_node: "{{ kubeinit_inventory_compute_name_pattern | format(ansible_loop.index) }}"

- name: Update next available address for allocation
  ansible.builtin.set_fact:
    kubeinit_cluster_next_available: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipmath(kubeinit_spec_computes|int) }}"

- name: Assign extra_nodes addresses
  ansible.builtin.add_host:
    name: "{{ hostvars[extra_node].inventory_hostname }}"
    group: ['extra_nodes', 'inventory_nodes']
    ansible_host: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipv4('address') }}"
  loop: "{{ groups['extra_nodes'] | default([]) }}"
  loop_control:
    loop_var: extra_node
    extended: true
  when: hostvars[extra_node].distro == kubeinit_spec_distro

- name: Update next available address for allocation
  ansible.builtin.set_fact:
    kubeinit_cluster_next_available: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipmath(1) }}"
  loop: "{{ groups['extra_nodes'] | default([]) }}"
  loop_control:
    loop_var: extra_node
  when: hostvars[extra_node].distro == kubeinit_spec_distro

- name: Assign service_nodes addresses
  ansible.builtin.add_host:
    name: "{{ hostvars[service_node].inventory_hostname }}"
    group: ['service_nodes', 'inventory_nodes']
    ansible_host: "{{ kubeinit_cluster_nameserver | ansible.netcommon.ipv4(0 - ansible_loop.index0) | ansible.netcommon.ipv4('address') }}"
  loop: "{{ groups['service_nodes'] | default([]) }}"
  loop_control:
    loop_var: service_node
    extended: true

- name: Set cluster dhcp facts
  ansible.builtin.set_fact:
    kubeinit_cluster_dhcp_start: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipv4('address') }}"
    kubeinit_cluster_dhcp_end: "{{ kubeinit_fact_network | ansible.netcommon.ipv4(kubeinit_fact_dhcp_end_offset|int) | ansible.netcommon.ipv4('address') }}"

- name: Set cluster dhcp range size
  ansible.builtin.set_fact:
    kubeinit_cluster_dhcp_count: "{{ (kubeinit_cluster_dhcp_end | ansible.netcommon.ipv4('int') | int) - (kubeinit_cluster_dhcp_start | ansible.netcommon.ipv4('int') | int) + 1 }}"

- name: Assert sufficient dhcp range
  ansible.builtin.assert:
    that:
      - kubeinit_cluster_dhcp_count|int > 0

- name: Assign dhcp facts
  ansible.builtin.add_host:
    name: "{{ kubeinit_cluster_facts_name }}"
    dhcp_start: "{{ kubeinit_cluster_dhcp_start }}"
    dhcp_end: "{{ kubeinit_cluster_dhcp_end }}"

- name: Debug inventory_nodes ansible_host
  ansible.builtin.debug:
    var: hostvars[inventory_node].ansible_host
  loop: "{{ groups['inventory_nodes'] }}"
  loop_control:
    loop_var: inventory_node

- name: Add ssh facts for hypervisor hosts
  ansible.builtin.add_host:
    name: "{{ hypervisor_host }}"
    ansible_ssh_user: "{{ kubeinit_facts_hostvars.remote_user }}"
    ansible_ssh_extra_args: "-i ~/.ssh/id_{{ kubeinit_common_ssh_keytype }}"
  loop: "{{ hostvars[kubeinit_cluster_facts_name].hypervisors }}"
  loop_control:
    loop_var: hypervisor_host

- name: Gather hypervisor and localhost facts
  ansible.builtin.include_tasks: gather_host_facts.yml
  loop: "{{ hostvars[kubeinit_cluster_facts_name].hypervisors | union(['localhost']) }}"
  loop_control:
    loop_var: _param_gather_host

- name: Determine the hypervisor target for all inventory nodes
  ansible.builtin.set_fact:
    node_targets: "{{ (node_targets | default([])) | union([inventory_node] | product(hostvars[inventory_node].target_order.split(',') | reverse)) }}"
  loop: "{{ groups['inventory_nodes'] }}"
  loop_control:
    loop_var: inventory_node

- name: Assign the first requested hypervisor available for each node
  ansible.builtin.add_host:
    name: "{{ inventory_node }}"
    target: "{{ hostvars[inventory_node].target | default(candidate) }}"
  loop: "{{ node_targets }}"
  vars:
    inventory_node: "{{ item[0] }}"
    candidate: "{{ item[1] }}"
  when: candidate in hostvars[kubeinit_cluster_facts_name].hypervisors

- name: Debug inventory_nodes target
  ansible.builtin.debug:
    var: hostvars[inventory_node].target
  loop: "{{ groups['inventory_nodes'] }}"
  loop_control:
    loop_var: inventory_node

- name: Use cluster name as random number seed
  ansible.builtin.set_fact:
    _random_mac: "{{ '52:54:00' | community.general.random_mac(seed=kubeinit_cluster_name) }}"
    _random_uuid: "{{ 999999 | random(seed=kubeinit_cluster_name) | to_uuid }}"

- name: Assign remaining controller_nodes facts
  ansible.builtin.add_host:
    name: "{{ controller_node }}"
    group: ['controller_nodes', 'inventory_nodes']
    os: "{{ hostvars[controller_node].os[kubeinit_spec_distro] }}"
    mac: "{{ hostvars[controller_node].mac | default('52:54:00' | community.general.random_mac) }}"
    interfaceid: "{{ hostvars[controller_node].interfaceid | default(999999 | random | to_uuid) }}"
  loop: "{{ range(kubeinit_spec_controllers|int) | list }}"
  loop_control:
    extended: true
  vars:
    controller_node: "{{ kubeinit_inventory_controller_name_pattern | format(ansible_loop.index) }}"

- name: Assign remaining compute_nodes facts
  ansible.builtin.add_host:
    name: "{{ compute_node }}"
    group: ['compute_nodes', 'inventory_nodes']
    os: "{{ hostvars[compute_node].os[kubeinit_spec_distro] }}"
    mac: "{{ hostvars[compute_node].mac | default('52:54:00' | community.general.random_mac) }}"
    interfaceid: "{{ hostvars[compute_node].interfaceid | default(999999 | random | to_uuid) }}"
  loop: "{{ range(kubeinit_spec_computes|int) | list }}"
  loop_control:
    extended: true
  vars:
    compute_node: "{{ kubeinit_inventory_compute_name_pattern | format(ansible_loop.index) }}"

- name: Assign remaining extra_nodes facts
  ansible.builtin.add_host:
    name: "{{ hostvars[extra_node].inventory_hostname }}"
    group: ['extra_nodes', 'inventory_nodes']
    os: "{{ hostvars[extra_node].os[kubeinit_spec_distro] }}"
    ram: "{{ hostvars[extra_node].ram[kubeinit_spec_distro] }}"
    mac: "{{ hostvars[extra_node].mac | default('52:54:00' | community.general.random_mac) }}"
    interfaceid: "{{ hostvars[extra_node].interfaceid | default(999999 | random | to_uuid) }}"
  loop: "{{ groups['extra_nodes'] | default([]) }}"
  loop_control:
    loop_var: extra_node
    extended: true
  when: hostvars[extra_node].distro == kubeinit_spec_distro

- name: Assign remaining service_nodes facts
  ansible.builtin.add_host:
    name: "{{ hostvars[service_node].inventory_hostname }}"
    group: ['service_nodes', 'inventory_nodes']
    os: "{{ hostvars[service_node].os[kubeinit_spec_distro] }}"
    mac: "{{ hostvars[service_node].mac | default('52:54:00' | community.general.random_mac) }}"
    interfaceid: "{{ hostvars[service_node].interfaceid | default(999999 | random | to_uuid) }}"
  loop: "{{ groups['service_nodes'] | default([]) }}"
  loop_control:
    loop_var: service_node
    extended: true

- name: Set libvirt release facts
  ansible.builtin.set_fact:
    kubeinit_libvirt_debian_release: "11"
    kubeinit_libvirt_ubuntu_release: "{{ 'focal' if (kubeinit_cluster_distro == 'cdk') else 'hirsute' }}"

- name: Set registry authentication facts
  ansible.builtin.set_fact:
    kubeinit_registry_user: registryusername
    kubeinit_registry_password: registrypassword

- block:
    - name: Add tasks-gather-facts to tasks completed
      ansible.builtin.add_host:
        name: "{{ kubeinit_facts_name }}"
        tasks_completed: "{{ ['task-gather-facts'] }}"

    - block:
        - name: Stop after 'task-gather-facts' when requested
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in hostvars[kubeinit_facts_name].tasks_completed
  tags: omit_from_grapher
