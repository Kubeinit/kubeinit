---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

#
# Gather kubeinit facts
#

- name: Load kubeinit_defaults group
  ansible.builtin.add_host:
    name: 'kubeinit-defaults'
    groups: 'kubeinit_defaults'

- name: Gather kubeinit secrets
  ansible.builtin.include_role:
    name: kubeinit.kubeinit.kubeinit_prepare
    tasks_from: gather_kubeinit_secrets.yml
    public: true
  vars:
    _param_secret_names:
      - dockerhub-username
      - dockerhub-password
      - openshift-pullsecret

- name: Parse kubeinit_network_spec into a dictionary when defined
  ansible.builtin.set_fact:
    kubeinit_network_map: "{{ dict(_keys|zip(_vals)) }}"
  vars:
    _arr: "{{ kubeinit_network_spec | from_yaml }}"
    _keys: "{{ _arr | map('regex_replace', '^(.*?)=(.*)$', '\\1') | trim }}"
    _vals: "{{ _arr | map('regex_replace', '^(.*?)=(.*)$', '\\2') | trim }}"
  when: kubeinit_network_spec is defined

- name: Assert kubeinit_network group and kubeinit_network_spec have same name when both defined
  ansible.builtin.assert:
    msg: "Cluster network name from inventory and command-line specification must match."
    that: kubeinit_network_map['network_name'] == groups['kubeinit_network'][0]
  when: kubeinit_network_map['network_name'] | default('') | length > 0 and groups['kubeinit_network'][0] | default('') | length > 0

- name: Set default_kubeinit_network_name fact
  ansible.builtin.set_fact:
    default_kubeinit_network_name: "{{ hostvars['kubeinit-defaults'].default_network_name }}"

- name: Define kubeinit_network_name
  ansible.builtin.set_fact:
    kubeinit_network_name: "{{ kubeinit_network_map['network_name'] | default(groups['kubeinit_network'][0]) | default(default_kubeinit_network_name) }}"

- name: Add new entries to kubeinit_network group when not defined
  ansible.builtin.add_host:
    name: "{{ kubeinit_network_name }}"
    groups: 'kubeinit_network'
  when: groups['kubeinit_network'] | default([]) | length == 0

- name: Add kubeinit_network_map entries to kubeint_network group
  ansible.builtin.add_host:
    name: "{{ kubeinit_network_name }}"
    groups: 'kubeinit_network'
    network: "{{ kubeinit_network_map['network'] | default(omit) }}"
    gateway_offset: "{{ kubeinit_network_map['gateway_offset'] | default(omit) }}"
    nameserver_offset: "{{ kubeinit_network_map['nameserver_offset'] | default(omit) }}"
    dhcp_start_offset: "{{ kubeinit_network_map['dhcp_start_offset'] | default(omit) }}"
    dhcp_end_offset: "{{ kubeinit_network_map['dhcp_end_offset'] | default(omit) }}"
  when: kubeinit_network_map is defined

- name: Define kubeinit_network_hostvars and kubeinit_fact_natwork
  ansible.builtin.set_fact:
    kubeinit_network_hostvars: "{{ hostvars[kubeinit_network_name] }}"
    kubeinit_fact_network: "{{ hostvars[kubeinit_network_name].network }}"

- name: Set facts from kubeinit_network group
  ansible.builtin.set_fact:
    kubeinit_cluster_network_name: "{{ kubeinit_network_name }}"
    kubeinit_cluster_network: "{{ kubeinit_fact_network | ansible.netcommon.ipv4('net') }}"
    kubeinit_cluster_prefix: "{{ kubeinit_fact_network | ansible.netcommon.ipv4('prefix') }}"
    kubeinit_cluster_netmask: "{{ kubeinit_fact_network | ansible.netcommon.ipv4('netmask') | ansible.netcommon.ipv4('address') }}"
    kubeinit_cluster_gateway: "{{ kubeinit_fact_network | ansible.netcommon.ipv4(kubeinit_network_hostvars.gateway_offset|int) | ansible.netcommon.ipv4('address') }}"
    kubeinit_cluster_nameserver: "{{ kubeinit_fact_network | ansible.netcommon.ipv4(kubeinit_network_hostvars.nameserver_offset|int) | ansible.netcommon.ipv4('address') }}"
    kubeinit_cluster_next_available: "{{ kubeinit_fact_network | ansible.netcommon.ipv4(kubeinit_network_hostvars.dhcp_start_offset|int) }}"

- name: Assert additional constraints
  ansible.builtin.assert:
    that:
      - kubeinit_cluster_prefix|int < 30

- name: Add cluster network facts to cluster facts
  ansible.builtin.add_host:
    name: "{{ kubeinit_cluster_name }}"
    network_name: "{{ kubeinit_cluster_network_name }}"
    network: "{{ kubeinit_cluster_network }}"
    prefix: "{{ kubeinit_cluster_prefix }}"
    netmask: "{{ kubeinit_cluster_netmask }}"
    gateway: "{{ kubeinit_cluster_gateway }}"
    nameserver: "{{ kubeinit_cluster_nameserver }}"

- name: Assign controller_nodes addresses
  ansible.builtin.add_host:
    name: "{{ controller_node }}"
    group: ['controller_nodes', 'inventory_nodes']
    ansible_connection: 'ssh'
    ansible_host: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipmath(ansible_loop.index0) | ansible.netcommon.ipv4('address') }}"
    type: 'virtual'
  loop: "{{ range(kubeinit_spec_controllers|int) | list }}"
  loop_control:
    extended: true
  vars:
    controller_node: "{{ hostvars[kubeinit_cluster_name].controller_name_pattern | format(ansible_loop.index) }}"

- name: Update next available address for allocation
  ansible.builtin.set_fact:
    kubeinit_cluster_next_available: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipmath(kubeinit_spec_controllers|int) }}"

- name: Assign compute_nodes addresses
  ansible.builtin.add_host:
    name: "{{ compute_node }}"
    group: ['compute_nodes', 'inventory_nodes']
    ansible_connection: 'ssh'
    ansible_host: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipmath(ansible_loop.index0) | ansible.netcommon.ipv4('address') }}"
    type: 'virtual'
  loop: "{{ range(kubeinit_spec_computes|int) | list }}"
  loop_control:
    extended: true
  vars:
    compute_node: "{{ hostvars[kubeinit_cluster_name].compute_name_pattern | format(ansible_loop.index) }}"

- name: Update next available address for allocation
  ansible.builtin.set_fact:
    kubeinit_cluster_next_available: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipmath(kubeinit_spec_computes|int) }}"

- name: Set default_extra_nodes_map_list fact
  ansible.builtin.set_fact:
    default_extra_nodes_map_list: "{{ hostvars['kubeinit-defaults'].default_extra_nodes_map_list }}"

- name: Assign default entries to extra_nodes group when not defined
  block:

    - name: Load extra_nodes_spec from yaml into a list of dictionaries
      ansible.builtin.set_fact:
        extra_nodes_map_list: "{{ (extra_nodes_map_list | default([])) | union([_dict]) }}"
      loop: "{{ extra_nodes_spec | from_yaml }}"
      vars:
        _keys: "{{ item | map('regex_replace', '^(.*?)=(.*)$', '\\1') | trim }}"
        _vals: "{{ item | map('regex_replace', '^(.*?)=(.*)$', '\\2') | trim }}"
        _dict: "{{ dict(_keys|zip(_vals)) }}"
      when: extra_nodes_spec is defined

    # TODO:FIXME: This will take into account any node in default_extra_nodes_map_list
    # not only one the default extra nodes for the specific distro
    - name: Set facts to get the number of extra nodes
      ansible.builtin.set_fact:
        kubeinit_spec_extra_nodes: "{{ (default_extra_nodes_map_list | default([]) + extra_nodes_map_list | default([])) | length | int }}"

    - name: Add entries for the current distro only
      ansible.builtin.add_host:
        name: "{{ item['name'] }}"
        group: 'extra_nodes'
        when_distro: "{{ item['when_distro'] }}"
      loop: "{{ default_extra_nodes_map_list + (extra_nodes_map_list | default([])) }}"
      when: kubeinit_cluster_distro in item['when_distro']

  when: groups['extra_nodes'] | default([]) | length == 0

- name: Assign extra_nodes addresses
  ansible.builtin.add_host:
    name: "{{ extra_node }}"
    group: ['extra_nodes', 'inventory_nodes']
    ansible_connection: 'ssh'
    ansible_host: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipmath(ansible_loop.index0|int) }}"
    type: 'virtual'
  loop: "{{ groups['extra_nodes'] | default([]) }}"
  loop_control:
    extended: true
    loop_var: extra_node
  when: kubeinit_cluster_distro in hostvars[extra_node]['when_distro']

- name: Update next available address for allocation
  ansible.builtin.set_fact:
    kubeinit_cluster_next_available: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipmath(kubeinit_spec_extra_nodes|int) }}"
  loop: "{{ groups['extra_nodes'] | default([]) }}"
  loop_control:
    loop_var: extra_node
  when: kubeinit_cluster_distro in hostvars[extra_node]['when_distro']

- name: Set default_service_nodes_map_list fact
  ansible.builtin.set_fact:
    default_service_nodes_map_list: "{{ hostvars['kubeinit-defaults'].default_service_nodes_map_list }}"

- name: Assign default entries to service_nodes group when not defined
  block:

    - name: Add services default to service_nodes
      ansible.builtin.add_host:
        name: "{{ item['name'] }}"
        group: 'service_nodes'
        services: "{{ item['services'] }}"
      loop: "{{ default_service_nodes_map_list }}"

  when: groups['service_nodes'] | default([]) | length == 0

- name: Assign service_nodes addresses
  ansible.builtin.add_host:
    name: "{{ service_node }}"
    group: ['service_nodes', 'inventory_nodes']
    ansible_connection: 'ssh'
    ansible_host: "{{ kubeinit_cluster_nameserver | ansible.netcommon.ipv4(0 - ansible_loop.index0) | ansible.netcommon.ipv4('address') }}"
    type: 'container'
  loop: "{{ groups['service_nodes'] | default([]) }}"
  loop_control:
    loop_var: service_node
    extended: true

- name: Set cluster dhcp facts
  ansible.builtin.set_fact:
    kubeinit_cluster_dhcp_start: "{{ kubeinit_cluster_next_available | ansible.netcommon.ipv4('address') }}"
    kubeinit_cluster_dhcp_end: "{{ kubeinit_fact_network | ansible.netcommon.ipv4(kubeinit_network_hostvars.dhcp_end_offset|int) | ansible.netcommon.ipv4('address') }}"

- name: Set cluster dhcp range size
  ansible.builtin.set_fact:
    kubeinit_cluster_dhcp_count: "{{ (kubeinit_cluster_dhcp_end | ansible.netcommon.ipv4('int') | int) - (kubeinit_cluster_dhcp_start | ansible.netcommon.ipv4('int') | int) + 1 }}"

- name: Assert sufficient dhcp range
  ansible.builtin.assert:
    that:
      - kubeinit_cluster_dhcp_count|int > 0

- name: Assign dhcp facts
  ansible.builtin.add_host:
    name: "{{ kubeinit_cluster_name }}"
    dhcp_start: "{{ kubeinit_cluster_dhcp_start }}"
    dhcp_end: "{{ kubeinit_cluster_dhcp_end }}"

- name: Clear kubeinit_network_hostvars
  ansible.builtin.set_fact:
    kubeinit_network_hostvars: null

- name: Define default_cluster_nodes_map_list
  ansible.builtin.set_fact:
    default_cluster_nodes_map_list: "{{ hostvars['kubeinit-defaults'].default_cluster_nodes_map_list }}"

- name: Add all other cluster node defaults using default_cluster_nodes_map_list
  ansible.builtin.set_fact:
    cluster_nodes_defaults: "{{ cluster_nodes_defaults | default([]) + (groups['inventory_nodes'] | product([item])) }}"
  loop: "{{ default_cluster_nodes_map_list }}"
  when: item['when_distro'] is not defined or kubeinit_cluster_distro in item['when_distro']

- name: Load cluster_nodes_spec from yaml into a list of dictionaries
  ansible.builtin.set_fact:
    cluster_nodes_map_list: "{{ (cluster_nodes_map_list | default([])) | union([_dict]) }}"
  loop: "{{ cluster_nodes_spec | from_yaml }}"
  vars:
    _keys: "{{ item | map('regex_replace', '^(.*?)=(.*)$', '\\1') | trim }}"
    _vals: "{{ item | map('regex_replace', '^(.*?)=(.*)$', '\\2') | trim }}"
    _dict: "{{ dict(_keys|zip(_vals)) }}"
  when: cluster_nodes_spec is defined

- name: Add cluster_nodes_spec defaults
  ansible.builtin.set_fact:
    cluster_nodes_defaults: "{{ cluster_nodes_defaults | default([]) + (groups['inventory_nodes'] | product([item])) }}"
  loop: "{{ cluster_nodes_map_list }}"
  when: cluster_nodes_spec is defined and (item['when_distro'] is not defined or kubeinit_cluster_distro in item['when_distro'])

- name: Apply defaults to all cluster nodes
  ansible.builtin.add_host:
    name: "{{ _host }}"
    os: "{{ _defaults['os'] if (_defaults['os'] is defined and _group_matches|bool and _type_matches|bool) else omit }}"
    vcpus: "{{ _defaults['vcpus'] if (_defaults['vcpus'] is defined and _group_matches|bool and _type_matches|bool) else omit }}"
    maxvcpus: "{{ _defaults['maxvcpus'] if (_defaults['maxvcpus'] is defined and _group_matches|bool and _type_matches|bool) else omit }}"
    disk: "{{ _defaults['disk'] if (_defaults['disk'] is defined and _group_matches|bool and _type_matches|bool) else omit }}"
    ram: "{{ _defaults['ram'] if (_defaults['ram'] is defined and _group_matches|bool and _type_matches|bool) else omit }}"
    target_order: "{{ _defaults['target_order'] if (_defaults['target_order'] is defined and _group_matches|bool and _type_matches|bool) else omit }}"
  loop: "{{ cluster_nodes_defaults }}"
  vars:
    _host: "{{ item[0] }}"
    _defaults: "{{ item[1] }}"
    _group_matches: "{{ item[1]['when_group'] | default('inventory_nodes') in hostvars[item[0]].group_names }}"
    _type_matches: "{{ item[1]['when_type'] | default(hostvars[item[0]].type) | default('') == hostvars[item[0]].type | default('') }}"

- name: Clear cluster_nodes_defaults
  ansible.builtin.set_fact:
    cluster_nodes_defaults: null

- name: Define kubeinit_facts_hostvars
  ansible.builtin.set_fact:
    kubeinit_facts_hostvars: "{{ hostvars[kubeinit_facts_name] }}"

- name: Define kubeinit_ssh_keytype
  ansible.builtin.set_fact:
    kubeinit_ssh_keytype: "{{ hostvars['kubeinit-env'].ssh_keytype }}"

- name: Use cluster name as random number seed
  ansible.builtin.set_fact:
    _random_mac: "{{ '52:54:00' | community.general.random_mac(seed=kubeinit_cluster_name) }}"
    _random_uuid: "{{ 999999 | random(seed=kubeinit_cluster_name) | to_uuid }}"

- name: Assign remaining controller_nodes facts
  ansible.builtin.add_host:
    name: "{{ controller_node }}"
    group: ['controller_nodes', 'inventory_nodes']
    mac: "{{ hostvars[controller_node].mac | default('52:54:00' | community.general.random_mac) }}"
    interfaceid: "{{ hostvars[controller_node].interfaceid | default(999999 | random | to_uuid) }}"
  loop: "{{ range(kubeinit_spec_controllers|int) | list }}"
  loop_control:
    extended: true
  vars:
    controller_node: "{{ hostvars[kubeinit_cluster_name].controller_name_pattern | format(ansible_loop.index) }}"

- name: Assign remaining compute_nodes facts
  ansible.builtin.add_host:
    name: "{{ compute_node }}"
    group: ['compute_nodes', 'inventory_nodes']
    mac: "{{ hostvars[compute_node].mac | default('52:54:00' | community.general.random_mac) }}"
    interfaceid: "{{ hostvars[compute_node].interfaceid | default(999999 | random | to_uuid) }}"
  loop: "{{ range(kubeinit_spec_computes|int) | list }}"
  loop_control:
    extended: true
  vars:
    compute_node: "{{ hostvars[kubeinit_cluster_name].compute_name_pattern | format(ansible_loop.index) }}"

- name: Assign remaining extra_nodes facts
  ansible.builtin.add_host:
    name: "{{ hostvars[extra_node].inventory_hostname }}"
    group: ['extra_nodes', 'inventory_nodes']
    mac: "{{ hostvars[extra_node].mac | default('52:54:00' | community.general.random_mac) }}"
    interfaceid: "{{ hostvars[extra_node].interfaceid | default(999999 | random | to_uuid) }}"
  loop: "{{ groups['extra_nodes'] | default([]) }}"
  loop_control:
    loop_var: extra_node
    extended: true

- name: Assign remaining service_nodes facts
  ansible.builtin.add_host:
    name: "{{ hostvars[service_node].inventory_hostname }}"
    group: ['service_nodes', 'inventory_nodes']
    mac: "{{ hostvars[service_node].mac | default('52:54:00' | community.general.random_mac) }}"
    interfaceid: "{{ hostvars[service_node].interfaceid | default(999999 | random | to_uuid) }}"
  loop: "{{ groups['service_nodes'] | default([]) }}"
  loop_control:
    loop_var: service_node
    extended: true

- name: Set additional kubeinit-env facts
  ansible.builtin.set_fact:
    kubeinit_dns_public: "{{ hostvars['kubeinit-env'].dns_public }}"

- name: Set libvirt release facts
  ansible.builtin.set_fact:
    kubeinit_libvirt_debian_release: "11"
    kubeinit_libvirt_ubuntu_release: "{{ 'focal' if (kubeinit_cluster_distro == 'cdk') else 'impish' }}"

- name: Set registry authentication facts
  ansible.builtin.set_fact:
    kubeinit_registry_user: registryusername
    kubeinit_registry_password: registrypassword

- name: Determine the hypervisor target for all inventory nodes
  ansible.builtin.set_fact:
    node_targets: "{{ (node_targets | default([])) | union([inventory_node] | product(hostvars[inventory_node].target_order | reverse)) }}"
  loop: "{{ groups['inventory_nodes'] }}"
  loop_control:
    loop_var: inventory_node

- name: Assign the first requested hypervisor available for each node
  ansible.builtin.add_host:
    name: "{{ inventory_node }}"
    target: "{{ hostvars[inventory_node].target | default(candidate) }}"
  loop: "{{ node_targets }}"
  vars:
    inventory_node: "{{ item[0] }}"
    candidate: "{{ item[1] }}"
  when: candidate in groups['kubeinit_hypervisors']

- name: Update hosts and stop the deployment if required
  block:
    - name: Add tasks-gather-facts to tasks completed
      ansible.builtin.add_host:
        name: "{{ kubeinit_facts_name }}"
        tasks_completed: "{{ ['task-gather-facts'] }}"

    - name: Update kubeinit_facts_hostvars
      ansible.builtin.set_fact:
        kubeinit_facts_hostvars: "{{ hostvars[kubeinit_facts_name] }}"

    - name: Stop the deployment if required
      block:
        - name: Stop after 'task-gather-facts' when requested
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in hostvars[kubeinit_facts_name].tasks_completed
  tags: omit_from_grapher
