---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


##
## Hypervisor installing dependencies and rebooting.
##
- name: Set up the Hypervisors
  block:
    - name: Check if Intel virtualization is supported
      ansible.builtin.shell: |
        set -e
        grep vmx /proc/cpuinfo
      ignore_errors: yes
      register: intel_proccesor
      changed_when: "intel_proccesor.rc == 0"

    - name: Check if AMD virtualization is supported
      ansible.builtin.shell: |
        set -e
        grep svm /proc/cpuinfo
      ignore_errors: yes
      register: amd_proccesor
      changed_when: "amd_proccesor.rc == 0"

    - name: Fail in case no Intel or AMD virtualization support is not detected.
      ansible.builtin.fail:
        msg: "The system doesn't seem to have Intel nor AMD virtualization support."
      when: intel_proccesor.rc != 0 and amd_proccesor.rc != 0

    - name: Set fact for Intel virtualization
      ansible.builtin.set_fact:
        nested_virtualization_module_name: "kvm_intel"
      when: intel_proccesor.rc == 0

    - name: Set fact for AMD virtualization
      ansible.builtin.set_fact:
        nested_virtualization_module_name: "kvm_amd"
      when: amd_proccesor.rc == 0

    - name: Set fact for nested virtualization test path
      ansible.builtin.set_fact:
        nested_virtualization_test_path: "/sys/module/{{ nested_virtualization_module_name }}/parameters/nested"

    - name: "Ensure {{ nested_virtualization_module_name }} module is available and loaded"
      community.general.modprobe:
        name: "{{ nested_virtualization_module_name }}"
        state: present

    - name: Test status of nested virtualization
      ansible.builtin.shell: |
        set -e
        cat {{ nested_virtualization_test_path }}
      register: actual_status
      changed_when: "actual_status.rc == 0"

    - name: "Persist configuration in /etc/modprobe.d/kvm.conf"
      ansible.builtin.lineinfile:
        path: "/etc/modprobe.d/kvm.conf"
        regexp: "^options {{ nested_virtualization_module_name }}.*$"
        line: "options {{ nested_virtualization_module_name }} nested=1"
        create: yes
        mode: '0644'

    - name: "Load {{ nested_virtualization_module_name }} module"
      community.general.modprobe:
        name: "{{ nested_virtualization_module_name }}"
        state: present

    - name: Disable IPv6
      ansible.builtin.shell: |
        echo "net.ipv6.conf.all.disable_ipv6 = 1" > /etc/sysctl.d/70-ipv6.conf
        echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.d/70-ipv6.conf
        sysctl --load /etc/sysctl.d/70-ipv6.conf
      when: (ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora')
      changed_when: false

    # - name: Disable netfilter
    #   ansible.builtin.shell: |
    #     modprobe br_netfilter
    #     echo "br_netfilter" > /etc/modules-load.d/br_netfilter.conf
    #     sudo tee -a /etc/sysctl.conf <<EOF
    #     net.bridge.bridge-nf-call-ip6tables = 0
    #     net.bridge.bridge-nf-call-iptables = 0
    #     net.bridge.bridge-nf-call-arptables = 0
    #     EOF
    #     sysctl -p /etc/sysctl.conf
    #   changed_when: false

    - name: Disable SELinux
      ansible.posix.selinux:
        state: disabled
      when: (ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora')

    - name: install CentOS based requirements
      ansible.builtin.package:
        name: "{{ kubeinit_libvirt_hypervisor_dependencies.centos }}"
        state: present
      when: (ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora')
      register: installed_packages_centos

    - name: Disable Services (firewalld)
      ansible.builtin.service:
        name: "firewalld"
        state: stopped
        enabled: no
      when: (ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora')

    - name: install Debian based requirements
      ansible.builtin.package:
        name: "{{ kubeinit_libvirt_hypervisor_dependencies.debian }}"
        state: present
      when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
      register: installed_packages_debian

    - name: upgrade all packages
      ansible.builtin.package:
        name: '*'
        state: latest
      register: upgraded_packages

    - name: enable and start libvirtd
      ansible.builtin.service:
        name: libvirtd
        enabled: yes
        state: started

    - name: Restart if required
      ansible.builtin.set_fact:
        kubeinit_libvirt_restart: (installed_packages_debian.changed or installed_packages_centos.changed or upgraded_packages.changed)

    - name: Reboot host and wait for it to restart
      ansible.builtin.reboot:
        msg: "Reboot initiated by a package upgrade"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami
      when: kubeinit_libvirt_restart | bool

    - name: Set qemu user depending on the operative system
      ansible.builtin.set_fact:
        kubeinit_qemu_user: "{{ 'qemu' if (ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora') else 'libvirt-qemu' }}"

    - name: download qcow2 images
      ansible.builtin.get_url:
        validate_certs: False
        use_proxy: True
        url: "{{ item.value.uri }}{{ item.value.image }}"
        dest: "{{ kubeinit_libvirt_target_image_dir }}/{{ item.value.image }}"
        force: no
        mode: '0666'
        owner: "{{ kubeinit_qemu_user }}"
      with_items: "{{ lookup('dict', kubeinit_libvirt_source_images) | list }}"
      when: "item.value.image"

    - name: download kernel images
      ansible.builtin.get_url:
        validate_certs: False
        use_proxy: True
        url: "{{ item.value.uri }}{{ item.value.kernel }}"
        dest: "{{ kubeinit_libvirt_target_image_dir }}/{{ item.value.kernel }}"
        force: no
        mode: '0666'
        owner: "{{ kubeinit_qemu_user }}"
      with_items: "{{ lookup('dict', kubeinit_libvirt_source_images) | list }}"
      when: "item.value.kernel"

    - name: download initrd images
      ansible.builtin.get_url:
        validate_certs: False
        use_proxy: True
        url: "{{ item.value.uri }}{{ item.value.initrd }}"
        dest: "{{ kubeinit_libvirt_target_image_dir }}/{{ item.value.initrd }}"
        force: no
        mode: '0666'
        owner: "{{ kubeinit_qemu_user }}"
      with_items: "{{ lookup('dict', kubeinit_libvirt_source_images) | list }}"
      when: "item.value.initrd"

    - name: create the treeinfo directory FCOS
      ansible.builtin.shell: |
        cat <<EOF > {{ kubeinit_libvirt_target_image_dir }}/.treeinfo
        [general]
        arch = x86_64
        family = Fedora CoreOS
        platforms = x86_64
        version = kubeinit_libvirt_fcos_release.split(".")[0]
        [images-x86_64]
        initrd = {{ kubeinit_libvirt_source_images.coreos.initrd }}
        kernel = {{ kubeinit_libvirt_source_images.coreos.kernel }}
        EOF
      register: treeinfo
      changed_when: "treeinfo.rc == 0"
      when: "'okd' in kubeinit_inventory_cluster_distro and not kubeinit_okd_openshift_deploy | default(false)"

    - name: create the treeinfo directory for RHCOS
      ansible.builtin.shell: |
        cat <<EOF > {{ kubeinit_libvirt_target_image_dir }}/.treeinfo
        [general]
        arch = x86_64
        family = Red Hat CoreOS
        platforms = x86_64
        version = {{ kubeinit_okd_registry_release_tag_aux | default(omit) }}
        [images-x86_64]
        initrd = {{ kubeinit_libvirt_source_images.rhcos.initrd }}
        kernel = {{ kubeinit_libvirt_source_images.rhcos.kernel }}
        EOF
      register: treeinfo
      changed_when: "treeinfo.rc == 0"
      when: "'okd' in kubeinit_inventory_cluster_distro and kubeinit_okd_openshift_deploy | default(false)"

    - name: "Make sure we have a '{{ kubeinit_libvirt_cloud_user }}' group"
      ansible.builtin.group:
        name: "{{ kubeinit_libvirt_cloud_user }}"
        state: present

    - name: "Allow '{{ kubeinit_libvirt_cloud_user }}' group to have passwordless sudo"
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: "^%{{ kubeinit_libvirt_cloud_user }}"
        line: "%{{ kubeinit_libvirt_cloud_user }} ALL=(ALL) NOPASSWD: ALL"
        validate: 'visudo -cf %s'
        mode: '0644'

    - name: "Add sudoers users to {{ kubeinit_libvirt_cloud_user }} group"
      ansible.builtin.user:
        name: "{{ kubeinit_libvirt_cloud_user }}"
        groups: "{{ kubeinit_libvirt_cloud_user }}"
        append: yes
        state: present
        createhome: yes

    - name: Add Users to libvirt
      ansible.builtin.user:
        name: "{{ item }}"
        groups: "kvm,libvirt"
        append: yes
      with_items:
        - "{{ kubeinit_libvirt_cloud_user }}"
        - root

    - name: Create ssh folder
      ansible.builtin.file:
        path: "/home/{{ kubeinit_libvirt_cloud_user }}/.ssh/"
        state: directory
        mode: '0600'

    - name: Generate an OpenSSH keypair with the default values (4096 bits, rsa)
      community.crypto.openssh_keypair:
        path: "/home/{{ kubeinit_libvirt_cloud_user }}/.ssh/id_rsa"
        owner: "{{ kubeinit_libvirt_cloud_user }}"
        group: "{{ kubeinit_libvirt_cloud_user }}"

    - name: Fix owner of the generated pub key
      ansible.builtin.file:
        path: "/home/{{ kubeinit_libvirt_cloud_user }}/.ssh/id_rsa.pub"
        owner: "{{ kubeinit_libvirt_cloud_user }}"
        group: "{{ kubeinit_libvirt_cloud_user }}"
        mode: '0600'

    - name: Insert the default libvirt uri in user's home
      ansible.builtin.lineinfile:
        path: "/home/{{ kubeinit_libvirt_cloud_user }}/.bashrc"
        line: export LIBVIRT_DEFAULT_URI=qemu:///system
        mode: '0644'

    - name: clean up the hosts before validations
      ansible.builtin.include_tasks: 10_cleanup.yml

    - name: Create directories for config files per node
      ansible.builtin.file:
        path: "{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ item }}"
        state: directory
        mode: 0775
        recurse: yes
      with_items: "{{ groups['all_nodes'] }}"

    ##
    ## Configure OVN o a linux bridge in all the HVs
    ##

    - name: include the OVN install tasks
      ansible.builtin.include_tasks: 20_ovn_install.yml
      when: kubeinit_libvirt_ovn_enabled

    - name: include the linux bridge tasks
      ansible.builtin.include_tasks: 30_linux_bridge_setup.yml

    - name: include the OVN setup
      ansible.builtin.include_tasks: 40_ovn_setup.yml
      when: kubeinit_libvirt_ovn_enabled

    - name: post configure steps for OVN
      ansible.builtin.include_tasks: 50_ovn_post_setup.yml
      when: kubeinit_libvirt_ovn_enabled and (kubeinit_bastion_host in kubeinit_deployment_node_name)
