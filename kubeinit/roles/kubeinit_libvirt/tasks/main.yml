---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


##
## Hypervisor installing dependencies and rebooting.
##

- name: Show ansible_distribution
  ansible.builtin.debug:
    var: hostvars[kubeinit_deployment_node_name].ansible_distribution

- name: Show distribution_family
  ansible.builtin.debug:
    var: hostvars[kubeinit_deployment_node_name].distribution_family

- name: Fails if CentOS 7 hypervisor
  ansible.builtin.fail:
    msg:
      - "CentOS 7 is not supported as CentOS 8 guests are used."
      - "Refer to: https://access.redhat.com/solutions/4073061"
      - "This issue is caused by the forward compatibility of xfs"
      - "file system between CentOS 7 and CentOS 8."
      - "Xfs file system in CentOS 8 uses reflink and sparse files,"
      - "but CentOS 7 kernel does not understand them and refuses to mount it."
      - "This means that CentOS 8 guests won't work with CentOS 8 hosts."
  when: (hostvars[kubeinit_deployment_node_name].ansible_distribution == 'CentOS' and hostvars[kubeinit_deployment_node_name].ansible_distribution_major_version == "7")

- name: Run tasks that requires elevated privileges
  block:
    - name: Fix libvirt qemu bug
      ansible.builtin.shell: |
        set -eo pipefail
        mkdir -p /etc/qemu/firmware
        touch /etc/qemu/firmware/50-edk2-ovmf-cc.json
      args:
        executable: /bin/bash
      register: libvirt_bugfix
      changed_when: "libvirt_bugfix.rc == 0"

    - name: Install CentOS based requirements
      ansible.builtin.package:
        name: "{{ kubeinit_libvirt_hypervisor_dependencies.centos }}"
        state: present
      when: (hostvars[kubeinit_deployment_node_name].ansible_distribution == 'CentOS' or hostvars[kubeinit_deployment_node_name].ansible_distribution == 'RedHat' or hostvars[kubeinit_deployment_node_name].ansible_distribution == 'Fedora')
      register: installed_packages_centos

    - name: Install Debian based requirements
      ansible.builtin.package:
        name: "{{ kubeinit_libvirt_hypervisor_dependencies.debian }}"
        state: present
      when: (hostvars[kubeinit_deployment_node_name].ansible_distribution == 'Debian' or hostvars[kubeinit_deployment_node_name].ansible_distribution == 'Ubuntu')
      register: installed_packages_debian

    - name: Upgrade all packages
      ansible.builtin.package:
        name: '*'
        state: latest
      register: upgraded_packages

    - name: Add users to libvirt
      ansible.builtin.user:
        name: "{{ item }}"
        groups: "kvm,libvirt"
        append: yes
      with_items:
        - root
        - "{{ ansible_ssh_user | default(lookup('env', 'USER'), True) }}"

  become: true
  become_user: root

- name: Restart if required
  ansible.builtin.set_fact:
    kubeinit_libvirt_restart: (installed_packages_debian.changed or installed_packages_centos.changed or upgraded_packages.changed)

- name: Reboot host and wait for it to restart
  ansible.builtin.reboot:
    msg: "Reboot initiated by a package upgrade"
    connect_timeout: 5
    reboot_timeout: 600
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: whoami
  when: kubeinit_libvirt_restart | bool

- name: Check if Intel virtualization is supported
  ansible.builtin.shell: |
    set -e
    grep vmx /proc/cpuinfo
  ignore_errors: yes
  register: intel_processor
  changed_when: "intel_processor.rc == 0"

- name: Check if AMD virtualization is supported
  ansible.builtin.shell: |
    set -e
    grep svm /proc/cpuinfo
  ignore_errors: yes
  register: amd_processor
  changed_when: "amd_processor.rc == 0"

- name: Fail in case no Intel or AMD virtualization support is not detected and is not a hosted deployment.
  ansible.builtin.fail:
    msg: "The system doesn't seem to have Intel nor AMD virtualization support or is not a hosted deployment."
  when: intel_processor.rc != 0 and amd_processor.rc != 0 and not kubeinit_inventory_hosted_deployment

- name: Set fact for Intel virtualization
  ansible.builtin.set_fact:
    nested_virtualization_module_name: "kvm_intel"
  when: intel_processor.rc == 0

- name: Set fact for AMD virtualization
  ansible.builtin.set_fact:
    nested_virtualization_module_name: "kvm_amd"
  when: amd_processor.rc == 0

- name: Set fact for nested virtualization test path
  ansible.builtin.set_fact:
    nested_virtualization_test_path: "/sys/module/{{ nested_virtualization_module_name }}/parameters/nested"
  when: intel_processor.rc == 0 or amd_processor.rc == 0

- name: "Ensure {{ nested_virtualization_module_name }} module is available and loaded"
  community.general.modprobe:
    name: "{{ nested_virtualization_module_name }}"
    state: present
  when: intel_processor.rc == 0 or amd_processor.rc == 0

- name: Test status of nested virtualization
  ansible.builtin.shell: |
    set -e
    cat {{ nested_virtualization_test_path }}
  register: actual_status
  changed_when: "actual_status.rc == 0"
  when: intel_processor.rc == 0 or amd_processor.rc == 0

- name: "Persist configuration in /etc/modprobe.d/kvm.conf"
  ansible.builtin.lineinfile:
    path: "/etc/modprobe.d/kvm.conf"
    regexp: "^options {{ nested_virtualization_module_name }}.*$"
    line: "options {{ nested_virtualization_module_name }} nested=1"
    create: yes
    mode: '0644'
  when: intel_processor.rc == 0 or amd_processor.rc == 0

- name: "Load {{ nested_virtualization_module_name }} module"
  community.general.modprobe:
    name: "{{ nested_virtualization_module_name }}"
    state: present
  when: intel_processor.rc == 0 or amd_processor.rc == 0

- name: Enable and start firewalld
  ansible.builtin.service:
    name: firewalld
    enabled: yes
    state: started

- name: Enable and start libvirtd
  ansible.builtin.service:
    name: libvirtd
    enabled: yes
    state: started

- name: Create cloud user if requested
  ansible.builtin.include_tasks: 60_create_cloud_user.yml
  when: kubeinit_libvirt_create_cloud_user
  args:
    apply:
      become: true
      become_user: root
