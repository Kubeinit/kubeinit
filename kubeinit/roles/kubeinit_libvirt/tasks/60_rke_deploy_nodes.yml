---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Deploy an Ubuntu based guest
  block:
    - name: Create the interfaces template for networking details
      ansible.builtin.template:
        src: "../../roles/kubeinit_libvirt/templates/00-installer-ubuntu-netconfig.yaml.j2"
        dest: "{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/00-installer-ubuntu-netconfig.yaml"
        mode: "0644"

    - name: Create the hosts template
      ansible.builtin.template:
        src: "../../roles/kubeinit_libvirt/templates/101-cloudinit-hosts.tmpl.j2"
        dest: "{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/hosts.debian.tmpl"
        mode: "0644"

    - name: Create the main config file for cloud-init
      ansible.builtin.template:
        src: "../../roles/kubeinit_libvirt/templates/102-cloudinit-cloud.cfg.j2"
        dest: "{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/cloud.cfg"
        mode: "0644"

    - name: Create the datasource cloud-init file
      ansible.builtin.template:
        src: "../../roles/kubeinit_libvirt/templates/90-cloudinit-dpkg.cfg.j2"
        dest: "{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/90_dpkg.cfg"
        mode: "0644"

    - name: Remove old disk images
      ansible.builtin.file:
        path: "{{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_deployment_node_name }}.qcow2"
        state: absent

    - name: Grow the partitions
      ansible.builtin.shell: |
        qemu-img convert -f qcow2 '{{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_libvirt_source_images.ubuntu.image }}' -O qcow2 '{{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_deployment_node_name }}.qcow2'
        qemu-img resize {{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_deployment_node_name }}.qcow2 +{{ hostvars[kubeinit_deployment_node_name].disk }}
      register: grow_img
      changed_when: "grow_img.rc == 0"

    - name: "Inject {{ kubeinit_libvirt_cloud_user }} virt-customize assets"
      ansible.builtin.shell: |
        virt-customize -a {{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_deployment_node_name }}.qcow2 \
          --run-command 'useradd -s /bin/bash -u 1000 -p "$(openssl passwd -1 {{ kubeinit_libvirt_vms_default_password }})" {{ kubeinit_libvirt_cloud_user }}' \
          --run-command 'echo "{{ kubeinit_libvirt_cloud_user }} ALL=(root) NOPASSWD:ALL" > /etc/sudoers.d/{{ kubeinit_libvirt_cloud_user }}' \
          --run-command 'mkdir -p {{ kubeinit_libvirt_source_keystore_dir }}' \
          --run-command "sed -i 's/PermitRootLogin no/PermitRootLogin yes/g' /etc/ssh/sshd_config" \
          --run-command "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config" \
          --run-command "dpkg-reconfigure openssh-server" \
          --ssh-inject {{ kubeinit_libvirt_cloud_user }}:file:{{ kubeinit_libvirt_source_keystore_dir }}/{{ kubeinit_libvirt_source_pubkey_file }} \
          --ssh-inject root:file:/root/.ssh/authorized_keys \
          --run-command "echo {{ kubeinit_provision_vms_public_key }} >> /root/.ssh/authorized_keys" \
          --hostname {{ kubeinit_deployment_node_name }}.{{ kubeinit_inventory_cluster_name }}.{{ kubeinit_inventory_cluster_domain }} \
          --copy-in {{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/00-installer-ubuntu-netconfig.yaml:/etc/netplan \
          --copy-in {{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/hosts.debian.tmpl:/etc/cloud/templates \
          --copy-in {{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/90_dpkg.cfg:/etc/cloud/cloud.cfg.d \
          --copy-in {{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/cloud.cfg:/etc/cloud
      register: virt_inject
      changed_when: "virt_inject.rc == 0"

    - name: "Create VM definition for the service nodes"
      ansible.builtin.shell: |
        virt-install \
            --connect qemu:///system \
            --name={{ kubeinit_deployment_node_name }} \
            --memory memory={{ hostvars[kubeinit_deployment_node_name].ram // 1024 }} \
            --cpuset=auto \
            --vcpus={{ hostvars[kubeinit_deployment_node_name].vcpus }},maxvcpus={{ hostvars[kubeinit_deployment_node_name].maxvcpus }} \
            --os-type=linux \
            --os-variant=ubuntu18.04 \
            --autostart \
            {% for net in kubeinit_libvirt_cluster_nets %}
              {% if net.enabled %}
                {% if kubeinit_libvirt_ovn_enabled %}
                  --network network={{ net.name }}{% if net.main %},mac={{ hostvars[kubeinit_deployment_node_name].mac }},virtualport.parameters.interfaceid={{ hostvars[kubeinit_deployment_node_name].interfaceid }}{% endif %},target.dev=veth0-{{ kubeinit_deployment_node_name.split("-")[1][:2] }}{{ kubeinit_deployment_node_name.split("-")[2] }},model=virtio \
                {% else %}
                  --network network={{ net.name }}{% if net.main %},mac={{ hostvars[kubeinit_deployment_node_name].mac }}{% endif %},model=virtio \
                {% endif %}
              {% endif %}
            {% endfor %}
            --graphics none \
            --noautoconsole \
            --import \
            --disk {{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_deployment_node_name }}.qcow2,format=qcow2,bus=virtio
      register: virt_install
      changed_when: "virt_install.rc == 0"

    - name: wait until {{ kubeinit_deployment_node_name }} is running
      community.libvirt.virt:
        command: list_vms
        state: running
      register: running_vms
      retries: 30
      delay: 10
      until: kubeinit_deployment_node_name in running_vms.list_vms

  delegate_to: "{{ hostvars[kubeinit_deployment_node_name].target }}"

- name: Check cluster nodes are up and running
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_libvirt"
    tasks_from: 70_check_nodes_up.yml
    public: yes

- name: Upgrade cluster node packages and restart
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_{{ kubeinit_inventory_cluster_distro }}"
    tasks_from: 00_bounce_packages.yml
    public: yes

- name: Check cluster nodes are up and running
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_libvirt"
    tasks_from: 70_check_nodes_up.yml
    public: yes
