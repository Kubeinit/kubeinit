---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: get root host public key
  command: cat /root/.ssh/id_rsa.pub
  register: public_key_content
  changed_when: "public_key_content.rc == 0"
  tags:
    - provision_libvirt

- name: register the public key of the root user from the host
  set_fact:
    kubeinit_provision_vms_public_key={{ public_key_content.stdout }}
  tags:
    - provision_libvirt

- name: Create the network interface template for networking details
  template:
    src: "../../roles/kubeinit_libvirt/templates/ifcfg-eth0.j2"
    dest: '{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ item }}/ifcfg-eth0'
    mode: '0644'
  with_items: "{{ groups['okd_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Create the network interface template for the external interface if enabled
  template:
    src: "../../roles/kubeinit_libvirt/templates/ifcfg-eth1.j2"
    dest: '{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ item }}/ifcfg-eth1'
    mode: '0644'
  with_items: "{{ groups['okd_service_nodes'] }}"
  when: kubeinit_libvirt_external_service_interface_enabled
  tags:
    - provision_libvirt

- name: Create the hosts template
  template:
    src: "../../roles/kubeinit_libvirt/templates/101-cloudinit-hosts.tmpl.j2"
    dest: '{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ item }}/hosts.redhat.tmpl'
    mode: '0644'
  with_items: "{{ groups['okd_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Create the network cloudinit templates for networking details
  template:
    src: "../../roles/kubeinit_libvirt/templates/102-cloudinit-cloud.cfg.j2"
    dest: '{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ item }}/cloud.cfg'
    mode: '0644'
  with_items: "{{ groups['okd_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Remove old disk images
  file:
    path: "{{ kubeinit_libvirt_target_image_dir }}/{{ item }}.qcow2"
    state: absent
  with_items:
    - "{{ groups['all'] | map('regex_search','^((?!hypervisor).)*$') | select('string') | list }}"
  tags:
    - provision_libvirt

- name: Grow the partitions
  shell: |
    qemu-img convert -f qcow2 '{{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_libvirt_source_images.centos.image }}' -O qcow2 '{{ kubeinit_libvirt_target_image_dir }}/{{ item }}.qcow2'
    qemu-img resize {{ kubeinit_libvirt_target_image_dir }}/{{ item }}.qcow2 +{{ hostvars[item].disk }}
  with_items:
    - "{{ groups['all'] | map('regex_search','^((?!hypervisor).)*$') | select('string') | list }}"
  register: grow_img
  changed_when: "grow_img.rc == 0"
  tags:
    - provision_libvirt

# This will inject the VM configuration in the case of a CentOS machine
- name: "Inject {{ kubeinit_libvirt_cloud_user }} virt-customize assets"
  shell: |
    virt-customize -a {{ kubeinit_libvirt_target_image_dir }}/{{ item }}.qcow2 \
      --run-command "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config" \
      --run-command 'id -u {{ kubeinit_libvirt_cloud_user }} &>/dev/null || /usr/sbin/useradd -u 1000 {{ kubeinit_libvirt_cloud_user }}' \
      --run-command "sed -i s/^SELINUX=.*$/SELINUX=disabled/g /etc/selinux/config" \
      --ssh-inject {{ kubeinit_libvirt_cloud_user }}:file:{{ kubeinit_libvirt_source_keystore_dir }}/{{ kubeinit_libvirt_source_pubkey_file }} \
      --ssh-inject root:file:/root/.ssh/id_rsa.pub \
      --ssh-inject root:file:/root/.ssh/authorized_keys \
      --hostname {{ item }}.{{ kubeinit_inventory_cluster_domain }} \
      --copy-in {{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ item }}/ifcfg-eth0:/etc/sysconfig/network-scripts \
      {% if kubeinit_libvirt_external_service_interface_enabled %}
      --copy-in {{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ item }}/ifcfg-eth1:/etc/sysconfig/network-scripts \
      {% endif %}
      --copy-in {{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ item }}/hosts.redhat.tmpl:/etc/cloud/templates \
      --copy-in {{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ item }}/cloud.cfg:/etc/cloud \
      --selinux-relabel --root-password password:{{ kubeinit_libvirt_vms_default_password }}
  with_items: "{{ groups['okd_service_nodes'] }}"
  register: virt_inject
  changed_when: "virt_inject.rc == 0"
  tags:
    - provision_libvirt

- name: "Create VM definition for the service nodes"
  shell: |
    virt-install \
        --connect qemu:///system \
        --name={{ item }} \
        --memory memory={{ hostvars[item].ram // 1024 }} \
        --cpuset=auto \
        --vcpus=8,maxvcpus=16 \
        --os-type=linux \
        --os-variant=rhel8.0 \
        --autostart \
        {% for net in kubeinit_libvirt_cluster_nets %}
          {% if net.enabled %}
              --network network={{ net.name }}{% if net.main %},mac={{ hostvars[item].mac }}{% endif %},model=virtio \
          {% endif %}
        {% endfor %}
        {% if kubeinit_libvirt_external_service_interface_enabled %}
              --network bridge={{ kubeinit_libvirt_external_service_interface.attached }},model=virtio \
        {% endif %}
        --graphics none \
        --noautoconsole \
        --import \
        --disk {{ kubeinit_libvirt_target_image_dir }}/{{ item }}.qcow2,format=qcow2,bus=virtio
  with_items: "{{ groups['okd_service_nodes'] }}"
  register: virt_install
  changed_when: "virt_install.rc == 0"
  tags:
    - provision_libvirt

- name: wait for the host to boot
  wait_for:
    port: 22
    host: "{{ hostvars[item].ansible_host }}"
    search_regex: OpenSSH
    delay: 10
    timeout: 600
  with_items: "{{ groups['okd_service_nodes'] }}"
  tags:
    - provision_libvirt
