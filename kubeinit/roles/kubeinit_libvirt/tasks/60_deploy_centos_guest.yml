---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Deploy a CentOS based guest
  block:
    - name: Create the network interface template for networking details
      ansible.builtin.template:
        src: "../../roles/kubeinit_libvirt/templates/ifcfg-eth0.j2"
        dest: "{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/ifcfg-eth0"
        mode: "0644"

    - name: Create the hosts template
      ansible.builtin.template:
        src: "../../roles/kubeinit_libvirt/templates/101-cloudinit-hosts.tmpl.j2"
        dest: "{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/hosts.redhat.tmpl"
        mode: "0644"

    - name: Create the network cloudinit templates for networking details
      ansible.builtin.template:
        src: "../../roles/kubeinit_libvirt/templates/102-cloudinit-cloud.cfg.j2"
        dest: "{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/cloud.cfg"
        mode: "0644"

    - name: Remove old disk images
      ansible.builtin.file:
        path: "{{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_deployment_node_name }}.qcow2"
        state: absent

    - name: Grow the partitions
      ansible.builtin.shell: |
        qemu-img convert -f qcow2 '{{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_libvirt_source_images.centos.image }}' -O qcow2 '{{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_deployment_node_name }}.qcow2'
        qemu-img resize {{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_deployment_node_name }}.qcow2 +{{ hostvars[kubeinit_deployment_node_name].disk }}
      register: grow_img
      changed_when: "grow_img.rc == 0"

    # This will inject the VM configuration in the case of a CentOS machine
    - name: "Inject {{ kubeinit_libvirt_cloud_user }} virt-customize assets in {{ kubeinit_deployment_node_name }}"
      ansible.builtin.shell: |
        virt-customize -a {{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_deployment_node_name }}.qcow2 \
          --install python3 \
          --run-command "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config" \
          --run-command 'id -u {{ kubeinit_libvirt_cloud_user }} &>/dev/null || /usr/sbin/useradd -u 1000 {{ kubeinit_libvirt_cloud_user }}' \
          --run-command "sed -i s/^SELINUX=.*$/SELINUX=disabled/g /etc/selinux/config" \
          --ssh-inject {{ kubeinit_libvirt_cloud_user }}:file:{{ kubeinit_libvirt_source_keystore_dir }}/{{ kubeinit_libvirt_source_pubkey_file }} \
          --ssh-inject root:file:/root/.ssh/authorized_keys \
          --run-command "echo {{ kubeinit_provision_vms_public_key }} >> /root/.ssh/authorized_keys" \
          --hostname {{ kubeinit_deployment_node_name }}.{{ kubeinit_inventory_cluster_name }}.{{ kubeinit_inventory_cluster_domain }} \
          --copy-in {{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/ifcfg-eth0:/etc/sysconfig/network-scripts \
          --copy-in {{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/hosts.redhat.tmpl:/etc/cloud/templates \
          --copy-in {{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ kubeinit_deployment_node_name }}/cloud.cfg:/etc/cloud \
          --selinux-relabel --root-password password:{{ kubeinit_libvirt_vms_default_password }}
      register: virt_inject
      changed_when: "virt_inject.rc == 0"

    - name: "Create VM definition for {{ kubeinit_deployment_node_name }}"
      ansible.builtin.shell: |
        virt-install \
            --connect qemu:///system \
            --name={{ kubeinit_deployment_node_name }} \
            --memory memory={{ hostvars[kubeinit_deployment_node_name].ram // 1024 }} \
            --cpuset=auto \
            --vcpus={{ hostvars[kubeinit_deployment_node_name].vcpus }},maxvcpus={{ hostvars[kubeinit_deployment_node_name].maxvcpus }} \
            --os-type=linux \
            --os-variant=rhel8.0 \
            --autostart \
            {% for net in kubeinit_libvirt_cluster_nets %}
              {% if net.enabled %}
                --network network={{ net.name }}{% if net.main %},mac={{ hostvars[kubeinit_deployment_node_name].mac }},virtualport.parameters.interfaceid={{ hostvars[kubeinit_deployment_node_name].interfaceid }}{% endif %},target.dev=veth0-{{ kubeinit_inventory_cluster_distro }}{{ kubeinit_deployment_node_name.split("-")[1][:3] }}{{ kubeinit_deployment_node_name.split("-")[2] }},model=virtio \
              {% endif %}
            {% endfor %}
            --graphics none \
            --noautoconsole \
            --import \
            --disk {{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_deployment_node_name }}.qcow2,format=qcow2,bus=virtio
      register: virt_install
      changed_when: "virt_install.rc == 0"

    - name: Wait until {{ kubeinit_deployment_node_name }} is running
      community.libvirt.virt:
        command: list_vms
        state: running
      register: running_vms
      retries: 30
      delay: 10
      until: kubeinit_deployment_node_name in running_vms.list_vms

  delegate_to: "{{ hostvars[kubeinit_deployment_node_name].target }}"

- name: Check cluster nodes are up and running
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_libvirt"
    tasks_from: 70_check_nodes_up.yml
    public: yes

- name: Upgrade cluster node packages and restart
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_{{ kubeinit_inventory_cluster_distro }}"
    tasks_from: 00_bounce_packages.yml
    public: yes

- name: Configure common requirements in guests
  block:
    - name: Make NetworkManager stop updating resolv.conf
      ansible.builtin.lineinfile:
        dest: "/etc/NetworkManager/NetworkManager.conf"
        insertafter: "{{ item.inserts }}"
        state: present
        line: "{{ item.lines }}"
      with_items:
        - {inserts: '^\[main\]', lines: 'dns=none'}

    - name: Restart NetworkManager
      ansible.builtin.service:
        name: NetworkManager
        state: restarted

    - name: Get resolv lines
      ansible.builtin.slurp:
        src: /etc/resolv.conf
      register: count_resolv_lines

    - name: Add the local DNS server as a local resolver when not empty
      ansible.builtin.lineinfile:
        path: /etc/resolv.conf
        line: "nameserver {{ kubeinit_bind_service_address }}"
        insertbefore: nameserver.*
      when: (count_resolv_lines.content | b64decode).splitlines() | length > 0

    - name: Add the local DNS server as a local resolver when empty
      ansible.builtin.lineinfile:
        path: /etc/resolv.conf
        line: "nameserver {{ kubeinit_bind_service_address }}"
      when: (count_resolv_lines.content | b64decode).splitlines() | length == 0

    - name: Add the local DNS server as a local resolver
      ansible.builtin.lineinfile:
        path: /etc/resolv.conf
        line: "nameserver {{ kubeinit_common_dns_public }}"
        insertafter: nameserver.*

    - name: "Disable IPv6"
      ansible.builtin.shell: |
        set -o pipefail
        # Disable IPv6
        echo "net.ipv6.conf.all.disable_ipv6 = 1" > /etc/sysctl.d/70-ipv6.conf
        echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.d/70-ipv6.conf
        sysctl --load /etc/sysctl.d/70-ipv6.conf
      args:
        executable: /bin/bash
      register: disable_ipv6
      changed_when: "disable_ipv6.rc == 0"

    - name: Resize root partition
      ansible.builtin.shell: |
        echo 'Reclaim space for root partition'
        growpart /dev/vda 1
        xfs_growfs /dev/vda1
      changed_when: false

    - name: Disable SELinux
      ansible.posix.selinux:
        state: disabled

    - name: Enable kernel modules and IP forward
      ansible.builtin.shell: |
        modprobe br_netfilter
        echo br_netfilter > /etc/modules-load.d/br_netfilter.conf
        modprobe overlay
        echo overlay > /etc/modules-load.d/overlay.conf
        echo '1' > /proc/sys/net/ipv4/ip_forward
        mkdir -p /proc/sys/net/bridge/
        echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables
        sysctl -p
      changed_when: false

    - name: Update packages
      ansible.builtin.yum:
        name: "*"
        state: latest
        use_backend: dnf
      register: update_packages

    - name: Reboot immediately after the package update
      ansible.builtin.shell: "sleep 5 && reboot"
      async: 1
      poll: 0
      when: update_packages is changed and kubeinit_libvirt_reboot_guests_after_package_update

  delegate_to: "{{ hostvars[kubeinit_deployment_node_name].ansible_host }}"

- name: Check cluster nodes are up and running
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_libvirt"
    tasks_from: 70_check_nodes_up.yml
    public: yes
