---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

##
## OVN post deployment configuration steps.
##

- name: Configure OVN in the first Hypervisor
  ansible.builtin.shell: |
    # Below two commands only for master. For SSL, other steps are required.
    ovn-nbctl set-connection ptcp:{{ kubeinit_libvirt_ovn_northbound_port }}
    ovn-sbctl set-connection ptcp:{{ kubeinit_libvirt_ovn_southbound_port }}
  register: config_ovn_connection
  changed_when: "config_ovn_connection.rc == 0"

#
# We create the OVN switch that will be binded to each chassis (hypervisor)
# In this switch we will create a port per guest
#
- name: Remove and create the cluster switch if exists
  ansible.builtin.shell: |
    #
    # Create a logical switch
    #
    ovn-nbctl ls-del sw0
    ovn-nbctl --wait=hv ls-add sw0
  register: config_ovn_switch
  when: kubeinit_libvirt_destroy_nets|bool and not kubeinit_libvirt_multicluster_keep_predefined_networks
  changed_when: "config_ovn_switch.rc == 0"

- name: Create OVS/OVN bindings for the VMs ports
  ansible.builtin.shell: |
    #
    # We create an OVN port using the interface ID and the mac address of the VM
    #
    ovn-nbctl --wait=hv lsp-add sw0 {{ hostvars[item].interfaceid }}
    #
    # The port name is the interface id of the VM, now we assign the mac address of the VM to the port
    #
    ovn-nbctl --wait=sb lsp-set-addresses {{ hostvars[item].interfaceid }} "{{ hostvars[item].mac }} {{ hostvars[item].ansible_host }}"
    ovn-nbctl --wait=sb lsp-set-port-security {{ hostvars[item].interfaceid }} "{{ hostvars[item].mac }} {{ hostvars[item].ansible_host }}"
  with_items: "{{ groups['all_nodes'] }}"
  register: config_ovn_bindings
  changed_when: "config_ovn_bindings.rc == 0"

- name: Configuring a router connected to the guests switch
  ansible.builtin.shell: |
    #
    # Create a logical router to connect the VMs switch
    #
    ovn-nbctl --wait=hv lr-add lr0
    ovn-nbctl --wait=hv lrp-add lr0 lr0-sw0 00:00:00:65:77:09 {{ kubeinit_inventory_network_gateway }}/{{ kubeinit_inventory_network_cidr }}
    ovn-nbctl --wait=hv lsp-add sw0 sw0-lr0
    ovn-nbctl lsp-set-type sw0-lr0 router
    ovn-nbctl lsp-set-addresses sw0-lr0 router
    ovn-nbctl lsp-set-options sw0-lr0 router-port=lr0-sw0
    #
    # We create the external access switch
    #
    ovn-nbctl --wait=hv ls-add public
    ovn-nbctl --wait=hv lrp-add lr0 lr0-public 00:00:20:20:12:13 172.16.0.1/24
    ovn-nbctl --wait=hv lsp-add public public-lr0
    ovn-nbctl lsp-set-type public-lr0 router
    ovn-nbctl lsp-set-addresses public-lr0 router
    ovn-nbctl lsp-set-options public-lr0 router-port=lr0-public
    #
    # Create a localnet port
    #
    ovn-nbctl --wait=hv lsp-add public public-ln
    ovn-nbctl lsp-set-type public-ln localnet
    ovn-nbctl lsp-set-addresses public-ln unknown
    ovn-nbctl lsp-set-options public-ln network_name=provider
    #
    # We add a bridge mapping from br-ex called provider
    #
    ovs-vsctl set Open_vSwitch . external-ids:ovn-bridge-mappings=provider:br-ex
    #
    # Configuring the chassis gateway to the first hypervisor
    #
    ovn-nbctl lrp-set-gateway-chassis lr0-public {{ kubeinit_ovn_central_host }}
    ovn-nbctl \
      --id=@gc0 create Gateway_Chassis name=lr0-public chassis_name={{ kubeinit_ovn_central_host }} priority=20 -- \
      set Logical_Router_Port lr0-public 'gateway_chassis=[@gc0]'
    ovn-nbctl set logical_router_port lr0-public options:redirect-chassis={{ kubeinit_ovn_central_host }}
    #
    # Create an ovs br-ex bridge to connect to the host
    #
    ovs-vsctl --may-exist add-br br-ex
    ip addr add 172.16.0.254/24 dev br-ex
    ip link set br-ex up
    #
    # Routes
    #
    # Connectivity from the host to the guest machines
    ip route add {{ kubeinit_inventory_network_net }}/{{ kubeinit_inventory_network_cidr }} via 172.16.0.1 dev br-ex
    # Connectivity to external/additional networks
    ovn-nbctl lr-route-add lr0 0.0.0.0/0 172.16.0.254
    #
    # Disable rp_filter
    #
    sysctl net.ipv4.conf.all.rp_filter=2
  register: config_ovn_routing
  changed_when: "config_ovn_routing.rc == 0"

#
# The NAT rules are mandatory to allow guests to have external connectivity
# there might be cases where they are not needed, but this change needs testing
# ----------- THESE ARE REQUIRED AT LEAST IN DEBIAN AND FEDORA CHASSIS -----------
#
- name: Configuring NAT
  ansible.builtin.shell: |
    set -eo pipefail
    #
    # NAT from the external interface
    #
    # Get the external interface name
    iface=$(ip route get "8.8.8.8" | grep -Po '(?<=(dev )).*(?= src| proto)')
    #
    iptables -t nat -A POSTROUTING -s {{ kubeinit_inventory_network_net }}/{{ kubeinit_inventory_network_cidr }} -o $iface -j MASQUERADE
    #
    iptables -A FORWARD -i $iface -j ACCEPT
    iptables -A FORWARD -i br-ex -j ACCEPT
    iptables -A FORWARD -o $iface -j ACCEPT
    iptables -A FORWARD -o br-ex -j ACCEPT
    #
    iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
    #
    iptables -P FORWARD ACCEPT
    iptables -P INPUT ACCEPT
    iptables -P OUTPUT ACCEPT
  args:
    executable: /bin/bash
  register: config_iptables
  changed_when: "config_iptables.rc == 0"
  when: false  # This task is disabled as the rules are managed by firewalld
# When the deployment finishes, it shuold be possible to see the available chassis and ports by running:
# ovn-nbctl show
# ovn-sbctl show
# ovs-vsctl show
# ovs-vsctl list interface veth0-okd-ser01
