---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

###############################################
#                                             #
# Submariner requires Docker for building the #
# container images. This cluster uses podman  #
# instead of docker, keep podman everywhere   #
#                                             #
###############################################

- name: Deploy secondary cluster
  block:
    - name: Copy the kubeconfig to the hypervisor
      ansible.builtin.shell: |
        set -e
        scp -i ~/.ssh/{{ kubeinit_cluster_name }}_id_{{ kubeinit_common_ssh_keytype }} -oStrictHostKeyChecking=no root@{{ hostvars[ groups['all_service_nodes'] | list | first ].ansible_host }}:~/.kube/config /root/kubeconfig_{{ kubeinit_cluster_name }}
      args:
        executable: /bin/bash
      register: kubeinit_submariner_get_files_from_broker
      changed_when: "kubeinit_submariner_get_files_from_broker.rc == 0"
      delegate_to: "hypervisor-01"
      when: kubeinit_submariner_is_secondary|bool

    - name: Copying the broker-info.subm, kubeconfig to the secondary cluster
      ansible.builtin.shell: |
        set -e

        # Broker info
        scp -i ~/.ssh/{{ kubeinit_cluster_name }}_id_{{ kubeinit_common_ssh_keytype }} -oStrictHostKeyChecking=no ./broker-info.subm root@{{ hostvars[ groups['all_service_nodes'] | list | first ].ansible_host }}:/root/

        # Kubeconfig
        scp -i ~/.ssh/{{ kubeinit_cluster_name }}_id_{{ kubeinit_common_ssh_keytype }} -oStrictHostKeyChecking=no /root/kubeconfig_* root@{{ hostvars[ groups['all_service_nodes'] | list | first ].ansible_host }}:/root/
      args:
        executable: /bin/bash
      register: kubeinit_submariner_secondary_sync_mand
      changed_when: "kubeinit_submariner_secondary_sync_mand.rc == 0"
      delegate_to: "hypervisor-01"
      when: kubeinit_submariner_is_secondary|bool

    - name: Copying the images, and binaries to the secondary cluster
      ansible.builtin.shell: |
        set -e

        # Submariner container images
        scp -i ~/.ssh/{{ kubeinit_cluster_name }}_id_{{ kubeinit_common_ssh_keytype }} -oStrictHostKeyChecking=no /root/submariner_images.tar root@{{ hostvars[ groups['all_service_nodes'] | list | first ].ansible_host }}:/root/

        # Submariner binaries
        scp -i ~/.ssh/{{ kubeinit_cluster_name }}_id_{{ kubeinit_common_ssh_keytype }} -oStrictHostKeyChecking=no /root/submariner_binaries.tar root@{{ hostvars[ groups['all_service_nodes'] | list | first ].ansible_host }}:/root/
      args:
        executable: /bin/bash
      register: kubeinit_submariner_secondary_sync
      changed_when: "kubeinit_submariner_secondary_sync.rc == 0"
      delegate_to: "hypervisor-01"
      when: kubeinit_submariner_is_secondary|bool and not kubeinit_submariner_deploy_stable|bool

    - name: Extract images and binaries
      ansible.builtin.shell: |
        set -e
        # Images
        podman load -i /root/submariner_images.tar

        # Binaries
        tar -xvf /root/submariner_binaries.tar --strip-components=1
      args:
        executable: /bin/bash
      register: kubeinit_submariner_extract
      changed_when: "kubeinit_submariner_extract.rc == 0"
      when: kubeinit_submariner_is_secondary|bool and not kubeinit_submariner_deploy_stable|bool

    - name: "Push the images to the local registry"
      ansible.builtin.shell: |
        set -o pipefail
        set -e
        LOCAL_REGISTRY=$(cat ~/registry-auths.json | jq .auths | jq -r 'keys[]')
        mkdir -p .docker
        cp ~/registry-auths.json ~/config.json
        cp ~/config.json .docker/
        podman login --authfile ~/registry-auths.json $LOCAL_REGISTRY
        podman tag quay.io/submariner/submariner-operator:devel $LOCAL_REGISTRY/submariner/submariner-operator:devel;
        podman push $LOCAL_REGISTRY/submariner/submariner-operator:devel;
      args:
        executable: /bin/bash
      register: push_submariner_to_local_registry
      changed_when: "push_submariner_to_local_registry.rc == 0"
      when: kubeinit_submariner_is_secondary|bool and not kubeinit_submariner_deploy_stable|bool

    - name: "Make the subctl binary available"
      ansible.builtin.shell: |
        set -o pipefail
        set -e

        mkdir -p ~/.local/bin/
        rm -rf ~/.local/bin/subctl
        cp /root/subctl ~/.local/bin/
      args:
        executable: /bin/bash
      register: install_subctl
      changed_when: "install_subctl.rc == 0"
      when: kubeinit_submariner_is_secondary|bool and not kubeinit_submariner_deploy_stable|bool

    - name: "Make the subctl binary available from a stable release"
      ansible.builtin.shell: |
        set -o pipefail
        set -e

        curl -Ls https://get.submariner.io | VERSION={{ kubeinit_submariner_deploy_version }} bash
      args:
        executable: /bin/bash
      register: install_subctl
      changed_when: "install_subctl.rc == 0"
      when: kubeinit_submariner_is_secondary|bool and kubeinit_submariner_deploy_stable|bool

    - name: Check if profile exists
      ansible.builtin.stat:
        path: ~/.profile
      register: profile_exists

    - name: Append subctl path to profile
      ansible.builtin.lineinfile:
        line: export PATH=$PATH:~/.local/bin
        dest: ~/.profile
      when: profile_exists.stat.exists and kubeinit_submariner_is_secondary|bool

    - name: Check if bash_profile exists
      ansible.builtin.stat:
        path: ~/.bash_profile
      register: bash_profile_exists

    - name: Append subctl path to bash_profile
      ansible.builtin.lineinfile:
        line: export PATH=$PATH:~/.local/bin
        dest: ~/.bash_profile
      when: bash_profile_exists.stat.exists and kubeinit_submariner_is_secondary|bool

    - name: Check if bashrc exists
      ansible.builtin.stat:
        path: ~/.bashrc
      register: bashrc_exists

    - name: Append subctl path to bashrc
      ansible.builtin.lineinfile:
        line: export PATH=$PATH:~/.local/bin
        dest: ~/.bashrc
      when: bashrc_exists.stat.exists and kubeinit_submariner_is_secondary|bool

    - name: "Get the service cidr"
      ansible.builtin.shell: |
        set -e
        cat ~/service_cidr
      args:
        executable: /bin/bash
      register: submariner_service_cidr
      changed_when: "submariner_service_cidr.rc == 0"
      when: kubeinit_submariner_is_secondary|bool

    - name: Set the cidr variable
      ansible.builtin.set_fact:
        kubeinit_submariner_service_cidr: "{{ submariner_service_cidr.stdout }}"
      when: kubeinit_submariner_is_secondary|bool

    - name: "Join secondary cluster to the broker overriding the images registry"
      ansible.builtin.shell: |
        set -o pipefail
        set -e

        export PATH=$PATH:~/.local/bin
        LOCAL_REGISTRY=$(cat ~/registry-auths.json | jq .auths | jq -r 'keys[]')
        subctl join \
            --kubeconfig ~/.kube/config ./broker-info.subm \
            --servicecidr {{ kubeinit_submariner_service_cidr }} \
            --label-gateway=false \
            --natt=false \
            --pod-debug \
            --cable-driver libreswan \
            --clusterid {{ kubeinit_cluster_name }} \
            --image-override="submariner-operator=$LOCAL_REGISTRY/submariner/submariner-operator:devel"
      args:
        executable: /bin/bash
      register: join_cluster
      changed_when: "join_cluster.rc == 0"
      when: kubeinit_submariner_is_secondary|bool and not kubeinit_submariner_deploy_stable|bool

    - name: "Join secondary cluster to the broker pulling from the default registry"
      ansible.builtin.shell: |
        set -o pipefail
        set -e

        export PATH=$PATH:~/.local/bin
        subctl join \
            --kubeconfig ~/.kube/config ./broker-info.subm \
            --servicecidr {{ kubeinit_submariner_service_cidr }} \
            --label-gateway=false \
            --natt=false \
            --pod-debug \
            --cable-driver libreswan \
            --clusterid {{ kubeinit_cluster_name }}
      args:
        executable: /bin/bash
      register: join_cluster
      changed_when: "join_cluster.rc == 0"
      when: kubeinit_submariner_is_secondary|bool and kubeinit_submariner_deploy_stable|bool

    - name: Tag the worker nodes
      ansible.builtin.shell: |
        for node in $(KUBECONFIG=~/.kube/config kubectl get nodes -l node-role.kubernetes.io/worker=true -o name | cut -d'/' -f 2);
        do
            KUBECONFIG=~/.kube/config kubectl label node ${node} submariner.io/gateway=true --overwrite
            KUBECONFIG=~/.kube/config kubectl label node ${node} gateway.submariner.io/natt-discovery-port=4490 --overwrite
        done
      args:
        executable: /bin/bash
      register: tag_worker_sec
      changed_when: "tag_worker_sec.rc == 0"
      when: kubeinit_submariner_is_secondary|bool
