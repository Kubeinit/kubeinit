---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- block:
    - name: Prepare environment if needed
      ansible.builtin.include_tasks: prepare_environment.yml
      vars:
        environment_prepared: "{{ kubeinit_facts_name is defined }}"
      when: not environment_prepared

    - block:
        - name: "Stop before 'task-deploy-ci' when requested"
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_before_task is defined and kubeinit_stop_before_task == 'task-deploy-ci'
  tags: omit_from_grapher

- name: Set ssh port to use
  ansible.builtin.set_fact:
    podman_remote_ssh_port: 22

- name: Set the remote end of the tunnel
  ansible.builtin.set_fact:
    podman_remote_ssh_host: "{{ kubeinit_ci_host_address }}"

- name: Delegate to localhost
  block:

    - name: Stat /etc/localtime
      ansible.builtin.stat:
        path: "/etc/localtime"
      register: _result_localtime
      changed_when: "_result_localtime is defined"

    #
    # Currently there are two ways of configuring
    # the docker.io credentials using the variable
    # kubeinit_common_docker_password
    #
    # If the kubeinit_common_docker_password variable
    # is the path of the file containing the password
    # we get the password from that file, and in the case
    # this path do not exists, then we asume that the
    # variable contains the password itself.
    #
    - name: Check if kubeinit_common_docker_password path exists
      ansible.builtin.stat:
        path: "{{ kubeinit_common_docker_password }}"
      register: _result_passwordfile
      no_log: true
      when: |
        kubeinit_common_docker_username is defined and
        kubeinit_common_docker_password is defined and
        kubeinit_common_docker_username and
        kubeinit_common_docker_password

    - name: Read docker password from file when the variable has the path
      ansible.builtin.slurp:
        src: "{{ kubeinit_common_docker_password }}"
      register: _result_passsword
      no_log: true
      when: |
        kubeinit_common_docker_username is defined and
        kubeinit_common_docker_password is defined and
        kubeinit_common_docker_username and
        kubeinit_common_docker_password and
        _result_passwordfile.stat.exists

    - name: Read runner registration_token
      ansible.builtin.slurp:
        src: "{{ kubeinit_common_gitlab_runner_registration_token }}"
      register: _result_registration_token
      no_log: true
      when: |
        kubeinit_common_gitlab_runner_registration_token is defined and kubeinit_common_gitlab_runner_registration_token

    - name: Read runner access token
      ansible.builtin.slurp:
        src: "{{ kubeinit_common_gitlab_runner_access_token }}"
      register: _result_access_token
      no_log: true
      when: |
        kubeinit_common_gitlab_runner_access_token is defined and kubeinit_common_gitlab_runner_access_token

    - name: Generate a local OpenSSH keypair for remote podman access to the ci host
      community.crypto.openssh_keypair:
        path: "{{ kubeinit_ci_keypair_path }}"
        type: "{{ kubeinit_common_ssh_keytype }}"
        comment: "{{ kubeinit_ci_host_fqdn }}"
        regenerate: 'never'
      register: _result_ci_keypair

  delegate_to: localhost

- name: Delegate to kubeinit_ci_host_name
  block:

    - name: Add public key to ci host
      ansible.posix.authorized_key:
        user: "{{ kubeinit_facts_hostvars.remote_user }}"
        key: "{{ _result_ci_keypair.public_key }}"
        comment: "{{ _result_ci_keypair.comment }}"
        state: present

    - name: Install common requirements
      ansible.builtin.package:
        name: ["podman", "buildah"]
        state: present
      become: true
      become_user: root

    - name: Podman login to docker.io
      containers.podman.podman_login:
        username: "{{ kubeinit_common_docker_username }}"
        password: "{{ (_result_passsword.content | b64decode | trim) if (_result_passwordfile.stat.exists) else (kubeinit_common_docker_password) }}"
        registry: "docker.io"
      no_log: true
      when: |
        kubeinit_common_docker_username is defined and
        kubeinit_common_docker_password is defined and
        kubeinit_common_docker_username and
        kubeinit_common_docker_password

    - name: Clear any reference to docker password
      ansible.builtin.set_fact:
        _result_passsword: null
      no_log: true
      when: |
        kubeinit_common_docker_username is defined and
        kubeinit_common_docker_password is defined and
        kubeinit_common_docker_username and
        kubeinit_common_docker_password

    - name: Ensure user specific systemd instance are persistent
      ansible.builtin.command: loginctl enable-linger {{ kubeinit_ci_host_user }}
      register: _result
      changed_when: "_result.rc == 0"

    - name: Retrieve remote user runtime path
      ansible.builtin.command: loginctl show-user {{ kubeinit_ci_host_user }} -p RuntimePath --value
      register: _result_systemd_runtime_path
      changed_when: "_result_systemd_runtime_path.rc == 0"

    - name: Enable and start podman.socket
      ansible.builtin.systemd:
        name: podman.socket
        enabled: yes
        state: started
        scope: user

    - name: Start podman.service
      ansible.builtin.systemd:
        name: podman.service
        state: started
        scope: user

    - name: Add remote system connection definition for ci hypervisor
      ansible.builtin.command: |
        podman --remote system connection add "{{ kubeinit_ci_host_name }}" --identity "{{ kubeinit_ci_keypair_path }}" "ssh://{{ kubeinit_ci_host_user }}@{{ podman_remote_ssh_host }}:{{ podman_remote_ssh_port }}{{ _result_systemd_runtime_path.stdout }}/podman/podman.sock"
      register: _result
      changed_when: "_result.rc == 0"
      delegate_to: localhost

    - name: Create kubeinit-ara-config volume
      containers.podman.podman_volume:
        name: kubeinit-ara-config
        state: present

    - name: Create kubeinit-ara-output volume
      containers.podman.podman_volume:
        name: kubeinit-ara-output
        state: present

    - name: Create kubeinit-runner-builds volume
      containers.podman.podman_volume:
        name: kubeinit-runner-builds
        state: present

    - name: Create ~/gitlab-runner-home folders
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0700'
      loop:
        - "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home"
        - "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home/.gitlab-runner"
        - "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home/.secrets"
        - "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home/.ssh"
        - "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home/scripts"

    - name: Create /home/gitlab-runner/.python-gitlab.cfg from template
      ansible.builtin.template:
        src: python-gitlab.cfg.j2
        dest: "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home/.python-gitlab.cfg"
        mode: '0644'

    - name: Create /home/gitlab-runner/.gitlab-runner/config.toml from template
      ansible.builtin.template:
        src: config.toml.j2
        dest: "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home/.gitlab-runner/config.toml"
        mode: '0644'

    - name: Create /home/gitlab-runner/.gitlab-runner/runner-host
      ansible.builtin.copy:
        content: |
          {{ kubeinit_ci_host_address }}
        dest: "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home/.gitlab-runner/runner-host"
        mode: '0644'

    - name: Create /home/gitlab-runner/.gitlab-runner/runner-user
      ansible.builtin.copy:
        content: |
          {{ kubeinit_ci_host_user }}
        dest: "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home/.gitlab-runner/runner-user"
        mode: '0644'

    - name: Create /home/gitlab-runner/.secrets/gitlab-private-token
      ansible.builtin.copy:
        content: |
          {{ _result_access_token.content | b64decode | trim }}
        dest: "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home/.secrets/gitlab-private-token"
        mode: '0600'

    - name: Create /home/gitlab-runner/.ssh/config from template
      ansible.builtin.template:
        src: ssh-config.j2
        dest: "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home/.ssh/config"
        mode: '0644'

    - name: Generate an OpenSSH keypair for gitlab-runner
      community.crypto.openssh_keypair:
        path: "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home/.ssh/id_{{ kubeinit_common_ssh_keytype }}"
        type: "{{ kubeinit_common_ssh_keytype }}"
        comment: "{{ kubeinit_ci_host_fqdn }} kubeinit-runner"
        regenerate: 'never'
      register: _result_ci_keypair

    - name: Add gitlab-runner public key to ci host
      ansible.posix.authorized_key:
        user: "{{ kubeinit_ci_host_user }}"
        key: "{{ _result_ci_keypair.public_key }}"
        comment: "{{ _result_ci_keypair.comment }}"
        state: present

    - name: Create /home/gitlab-runner/scripts/echo-private-token.sh from template
      ansible.builtin.template:
        src: echo-private-token.sh.j2
        dest: "{{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home/scripts/echo-private-token.sh"
        mode: '0755'

    - name: Create gitlab-runner-home.tgz archive
      ansible.builtin.shell: |
        set -eo pipefail
        (cd {{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home; tar --numeric-owner --owner 999 --group 999 -czvf {{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home.tgz .)
        rm -rf {{ hostvars[kubeinit_ci_host_name].remote_home }}/gitlab-runner-home
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"

    - name: Remove old image
      containers.podman.podman_image:
        name: localhost/kubeinit/kubeinit-ara-api
        state: absent

    - name: Remove any old buildah container
      ansible.builtin.shell: |
        set -eo pipefail
        if [ "$(buildah ls --filter 'name=kubeinit-ara' --format {% raw %}'{{ .ContainerName }}'{% endraw %})" != "" ]
        then
          buildah rm kubeinit-ara
        fi
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"

    - name: Create a new working container image
      ansible.builtin.command: buildah from --name kubeinit-ara docker.io/recordsansible/ara-api:latest
      register: _result
      changed_when: "_result.rc == 0"

    - name: Update existing packages in the image
      ansible.builtin.command: buildah run kubeinit-ara -- dnf update -q -y
      register: _result
      changed_when: "_result.rc == 0"

    - name: Install commands and services we will need
      ansible.builtin.command: buildah run kubeinit-ara -- dnf install -q -y procps findutils
      register: _result
      changed_when: "_result.rc == 0"

    - name: Link /etc/localtime to our local timezone
      ansible.builtin.command: buildah run kubeinit-ara -- ln -sf {{ _result_localtime.stat.lnk_source }} /etc/localtime
      register: _result
      changed_when: "_result.rc == 0"

    - name: Set kubeinit-ci-host-name label
      ansible.builtin.command: buildah config --label kubeinit-ci-host-name={{ kubeinit_ci_host_name }} kubeinit-ara
      register: _result
      changed_when: "_result.rc == 0"

    - name: Commit the image
      ansible.builtin.command: buildah commit kubeinit-ara kubeinit/kubeinit-ara-api:latest
      register: _result
      changed_when: "_result.rc == 0"

    - name: Remove the buildah container
      ansible.builtin.command: buildah rm kubeinit-ara
      register: _result
      changed_when: "_result.rc == 0"

    - name: Remove old image
      containers.podman.podman_image:
        name: localhost/kubeinit/kubeinit-ara-output
        state: absent

    - name: Remove any old buildah container
      ansible.builtin.shell: |
        set -eo pipefail
        if [ "$(buildah ls --filter 'name=kubeinit-output-data' --format {% raw %}'{{ .ContainerName }}'{% endraw %})" != "" ]
        then
          buildah rm kubeinit-output-data
        fi
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"

    - name: Create a new working container image
      ansible.builtin.command: buildah from --name kubeinit-output-data docker.io/httpd:2.4
      register: _result
      changed_when: "_result.rc == 0"

    - name: Update existing packages in the image
      ansible.builtin.command: buildah run kubeinit-output-data -- apt-get update -q -y
      register: _result
      changed_when: "_result.rc == 0"

    - name: Install commands and services we will need
      ansible.builtin.command: buildah run kubeinit-output-data -- apt-get install -q -y procps
      register: _result
      changed_when: "_result.rc == 0"

    - name: Auto-remove packages
      ansible.builtin.command: buildah run kubeinit-output-data -- apt-get autoremove -q -y
      register: _result
      changed_when: "_result.rc == 0"

    - name: Auto-clean packages
      ansible.builtin.command: buildah run kubeinit-output-data -- apt-get autoclean -q -y
      register: _result
      changed_when: "_result.rc == 0"

    - name: Clean packages
      ansible.builtin.command: buildah run kubeinit-output-data -- apt-get clean -q -y
      register: _result
      changed_when: "_result.rc == 0"

    - name: Link /etc/localtime to our local timezone
      ansible.builtin.command: buildah run kubeinit-output-data -- ln -sf {{ _result_localtime.stat.lnk_source }} /etc/localtime
      register: _result
      changed_when: "_result.rc == 0"

    - name: Link /usr/local/apache2/htdocs/ara-output-data to /opt/output_data/
      ansible.builtin.command: buildah run kubeinit-output-data -- ln -s /opt/output_data/ /usr/local/apache2/htdocs/ara-output-data
      register: _result
      changed_when: "_result.rc == 0"

    - name: Set httpd ServerName
      ansible.builtin.command: buildah run kubeinit-output-data -- sed -i -e 's/^#ServerName .*/ServerName kubeinit-ci-pod/' /usr/local/apache2/conf/httpd.conf
      register: _result
      changed_when: "_result.rc == 0"

    - name: Set kubeinit-ci-host-name label
      ansible.builtin.command: buildah config --label kubeinit-ci-host-name={{ kubeinit_ci_host_name }} kubeinit-output-data
      register: _result
      changed_when: "_result.rc == 0"

    - name: Commit the image
      ansible.builtin.command: buildah commit kubeinit-output-data kubeinit/kubeinit-ara-output:latest
      register: _result
      changed_when: "_result.rc == 0"

    - name: Remove the buildah container
      ansible.builtin.command: buildah rm kubeinit-output-data
      register: _result
      changed_when: "_result.rc == 0"

    - name: Remove old image
      containers.podman.podman_image:
        name: localhost/kubeinit/kubeinit-merge-request-runner
        state: absent

    - name: Remove any old buildah container
      ansible.builtin.shell: |
        set -eo pipefail
        if [ "$(buildah ls --filter 'name=kubeinit-runner' --format {% raw %}'{{ .ContainerName }}'{% endraw %})" != "" ]
        then
          buildah rm kubeinit-runner
        fi
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"

    - name: Create a new working container image
      ansible.builtin.command: buildah from --name kubeinit-runner docker.io/gitlab/gitlab-runner:latest
      register: _result
      changed_when: "_result.rc == 0"

    - name: Update existing packages in the image
      ansible.builtin.command: buildah run kubeinit-runner -- apt-get update -q -y
      register: _result
      changed_when: "_result.rc == 0"

    - name: Install gnupg for adding kubic repo
      ansible.builtin.command: buildah run kubeinit-runner -- apt-get install -q -y gnupg
      register: _result
      changed_when: "_result.rc == 0"

    - name: Add kubic repo
      ansible.builtin.command: buildah run kubeinit-runner -- bash -c '. /etc/os-release; echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list'
      register: _result
      changed_when: "_result.rc == 0"

    - name: Add kubic repo Release.key
      ansible.builtin.command: buildah run kubeinit-runner -- bash -c '. /etc/os-release; curl -L "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key" | apt-key add -'
      register: _result
      changed_when: "_result.rc == 0"

    - name: Update packages in the image
      ansible.builtin.command: buildah run kubeinit-runner -- apt-get update -q -y
      register: _result
      changed_when: "_result.rc == 0"

    - name: Install commands and services we will need
      ansible.builtin.command: buildah run kubeinit-runner -- apt-get install -q -y python3 python3-pip python3-apt jq vim net-tools
      register: _result
      changed_when: "_result.rc == 0"

    - name: Auto-remove packages
      ansible.builtin.command: buildah run kubeinit-runner -- apt-get autoremove -q -y
      register: _result
      changed_when: "_result.rc == 0"

    - name: Auto-clean packages
      ansible.builtin.command: buildah run kubeinit-runner -- apt-get autoclean -q -y
      register: _result
      changed_when: "_result.rc == 0"

    - name: Clean packages
      ansible.builtin.command: buildah run kubeinit-runner -- apt-get clean -q -y
      register: _result
      changed_when: "_result.rc == 0"

    - name: Link /etc/localtime to our local timezone
      ansible.builtin.command: buildah run kubeinit-runner -- ln -sf {{ _result_localtime.stat.lnk_source }} /etc/localtime
      register: _result
      changed_when: "_result.rc == 0"

    - name: Install PyYAML
      ansible.builtin.command: buildah run kubeinit-runner -- python3 -m pip install --ignore-installed PyYAML
      register: _result
      changed_when: "_result.rc == 0"

    - name: Install and upgrade pip
      ansible.builtin.command: buildah run kubeinit-runner -- python3 -m pip install --upgrade pip
      register: _result
      changed_when: "_result.rc == 0"

    - name: Install and upgrade cryptography
      ansible.builtin.command: buildah run kubeinit-runner -- python3 -m pip install --upgrade cryptography
      register: _result
      changed_when: "_result.rc == 0"

    - name: Install other python pip modules
      ansible.builtin.command: buildah run kubeinit-runner -- python3 -m pip install --upgrade wheel shyaml ansible netaddr ara requests PyGithub python-gitlab 'pyparsing<3' pybadges 'jinja2<3' urllib3 google-cloud-storage
      register: _result
      changed_when: "_result.rc == 0"

    - name: Install podman, buildah and skopeo
      ansible.builtin.command: buildah run kubeinit-runner -- apt-get install -yq podman buildah skopeo
      register: _result
      changed_when: "_result.rc == 0"

    - name: Copy contents of generated /home/gitlab-runner archive
      ansible.builtin.command: buildah add --quiet --chown 999:999 kubeinit-runner gitlab-runner-home.tgz /home/gitlab-runner
      register: _result
      changed_when: "_result.rc == 0"

    - name: Set kubeinit-ci-host-name label
      ansible.builtin.command: buildah config --label kubeinit-ci-host-name={{ kubeinit_ci_host_name }} kubeinit-runner
      register: _result
      changed_when: "_result.rc == 0"

    - name: Commit the image
      ansible.builtin.command: buildah commit kubeinit-runner kubeinit/kubeinit-merge-request-runner:latest
      register: _result
      changed_when: "_result.rc == 0"

    - name: Remove the buildah container
      ansible.builtin.command: buildah rm kubeinit-runner
      register: _result
      changed_when: "_result.rc == 0"

    - name: Remove the gitlab-runner-home archive
      ansible.builtin.file:
        path: gitlab-runner-home.tgz
        state: absent

    - name: Create a podman network for the ci containers
      containers.podman.podman_network:
        name: "{{ kubeinit_ci_bridge_name }}"
        disable_dns: true
        state: present

    - name: Create a podman pod for the ci containers
      containers.podman.podman_pod:
        name: "{{ kubeinit_ci_pod_name }}"
        network: "{{ kubeinit_ci_bridge_name }}"
        hostname: "{{ kubeinit_ci_host_fqdn }}"
        dns: "{{ kubeinit_common_dns_public }}"
        publish:
          - 8080:80/tcp
        state: started
      register: _result_pod_info

    - name: Gather current firewall rules
      ansible.posix.firewalld_info:
        active_zones: true
      register: _result_firewalld_info
      become: true
      become_user: root
      when: hostvars[kubeinit_ci_host_name].firewalld_is_active

    - name: Check firewalld ports for existing entries
      ansible.builtin.add_host:
        name: "{{ kubeinit_ci_host_name }}"
        add_publish_port: "{{ true if (['8080', 'tcp'] not in default_zone_info.ports) else false }}"
        reload_firewalld: "{{ true if (['8080', 'tcp'] not in default_zone_info.ports) else false }}"
      become: true
      become_user: root
      vars:
        default_zone_info: "{{ _result_firewalld_info.firewalld_info.zones[_result_firewalld_info.firewalld_info.default_zone] }}"

    - name: Open firewall port 8080 on bastion
      ansible.posix.firewalld:
        port: 8080/tcp
        state: enabled
        permanent: true
      become: true
      become_user: root
      when: hostvars[kubeinit_ci_host_name].add_publish_port | default(false)

    - name: Reload firewalld service
      ansible.builtin.command: |
        firewall-cmd --reload
      register: _result
      changed_when: "_result.rc == 0"
      become: true
      become_user: root
      when: hostvars[kubeinit_ci_host_name].reload_firewalld | default(false)

    - name: Reload podman networks
      ansible.builtin.command: |
        podman network reload --all
      register: _result
      changed_when: "_result.rc == 0"
      when: hostvars[kubeinit_ci_host_name].reload_firewalld | default(false)

    - name: Remove any previous kubeinit-ara-api container
      containers.podman.podman_container:
        name: kubeinit-ara-api
        state: absent

    - name: Create kubeinit-ara-api container
      containers.podman.podman_container:
        name: kubeinit-ara-api
        image: kubeinit/kubeinit-ara-api:latest
        state: stopped
        pod: "{{ kubeinit_ci_pod_name }}"
        init: true
        cap_add:
          - "AUDIT_WRITE"
        volumes:
          - "kubeinit-ara-config:/opt/ara:z"
          - "kubeinit-ara-output:/opt/output_data:z"
          - "kubeinit-runner-builds:/home/gitlab-runner/builds:z"
      register: _result_container_info

    - name: Create systemd service for podman container
      ansible.builtin.include_role:
        name: "kubeinit_ci"
        tasks_from: create_managed_service.yml
        public: true
      vars:
        _param_service_user_dir: "{{ hostvars[kubeinit_ci_host_name].remote_home }}"
        _param_service_user: "{{ kubeinit_ci_host_user }}"
        _param_systemd_service_name: kubeinit-ara-api
        _param_podman_container_name: "{{ _result_container_info.container.Name }}"
        _param_podman_container_pidfile: "{{ _result_container_info.container.ConmonPidFile }}"

    - name: Clear temp facts
      ansible.builtin.set_fact:
        _result_container_info: null

    - name: Set ownership of gitlab-runner builds folder
      ansible.builtin.command: podman exec kubeinit-ara-api chown 999:999 /home/gitlab-runner/builds
      register: _result
      changed_when: "_result.rc == 0"

    - name: Remove any previous kubeinit-ara-output container
      containers.podman.podman_container:
        name: kubeinit-ara-output
        state: absent

    - name: Create kubeinit-ara-output container
      containers.podman.podman_container:
        name: kubeinit-ara-output
        image: kubeinit/kubeinit-ara-output:latest
        state: stopped
        pod: "{{ kubeinit_ci_pod_name }}"
        init: true
        cap_add:
          - "AUDIT_WRITE"
        volumes:
          - "kubeinit-ara-output:/opt/output_data:z"
      register: _result_container_info

    - name: Create systemd service for podman container
      ansible.builtin.include_role:
        name: "kubeinit_ci"
        tasks_from: create_managed_service.yml
        public: true
      vars:
        _param_service_user_dir: "{{ hostvars[kubeinit_ci_host_name].remote_home }}"
        _param_service_user: "{{ kubeinit_ci_host_user }}"
        _param_systemd_service_name: kubeinit-ara-output
        _param_podman_container_name: "{{ _result_container_info.container.Name }}"
        _param_podman_container_pidfile: "{{ _result_container_info.container.ConmonPidFile }}"

    - name: Clear temp facts
      ansible.builtin.set_fact:
        _result_container_info: null

    - name: Remove any previous kubeinit-merge-request-runner container
      containers.podman.podman_container:
        name: kubeinit-merge-request-runner
        state: absent

    - name: Create kubeinit-merge-request-runner container
      containers.podman.podman_container:
        name: kubeinit-merge-request-runner
        image: kubeinit/kubeinit-merge-request-runner:latest
        state: stopped
        pod: "{{ kubeinit_ci_pod_name }}"
        init: true
        cap_add:
          - "AUDIT_WRITE"
        env:
          DEBUG: true
          LOG_LEVEL: debug
        volumes:
          - "{{ _result_systemd_runtime_path.stdout }}/podman/podman.sock:/var/run/docker.sock"
          - "kubeinit-ara-output:/opt/output_data:z"
          - "kubeinit-runner-builds:/home/gitlab-runner/builds:z"
        command: ['run', '--user', 'gitlab-runner', '--working-directory', '/home/gitlab-runner']
      register: _result_container_info

    - name: Create systemd service for podman container
      ansible.builtin.include_role:
        name: "kubeinit_ci"
        tasks_from: create_managed_service.yml
        public: true
      vars:
        _param_service_user_dir: "{{ hostvars[kubeinit_ci_host_name].remote_home }}"
        _param_service_user: "{{ kubeinit_ci_host_user }}"
        _param_systemd_service_name: kubeinit-merge-request-runner
        _param_podman_container_name: "{{ _result_container_info.container.Name }}"
        _param_podman_container_pidfile: "{{ _result_container_info.container.ConmonPidFile }}"

    - name: Clear temp facts
      ansible.builtin.set_fact:
        _result_container_info: null

  delegate_to: "{{ kubeinit_ci_host_name }}"

- name: Add gitlab-runner public key to hypervisor hosts
  ansible.posix.authorized_key:
    user: root
    key: "{{ _result_ci_keypair.public_key }}"
    comment: "{{ _result_ci_keypair.comment }}"
    state: present
  loop: "{{ groups['hypervisor_hosts'] }}"
  loop_control:
    loop_var: hypervisor_host
  delegate_to: "{{ hypervisor_host }}"

- name: Add remote container to hosts
  ansible.builtin.add_host:
    hostname: kubeinit-ara-api
    ansible_connection: containers.podman.podman
    ansible_python_interpreter: /usr/bin/python3
    ansible_podman_extra_args: --remote --connection "{{ kubeinit_ci_host_name }}"

- name: Disable pipelining while using podman connector
  block:

    - name: Wait for connection to kubeinit-ara-api container
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300

    - name: Run ara-manage migrate
      ansible.builtin.command: ara-manage migrate
      register: _result
      changed_when: "_result.rc == 0"

  vars:
    ansible_ssh_pipelining: False
  delegate_to: kubeinit-ara-api

- name: Add remote container to hosts
  ansible.builtin.add_host:
    hostname: kubeinit-merge-request-runner
    ansible_connection: containers.podman.podman
    ansible_python_interpreter: /usr/bin/python3
    ansible_podman_extra_args: --remote --connection "{{ kubeinit_ci_host_name }}"

- name: Disable pipelining while using podman connector
  block:

    - name: Wait for connection to kubeinit-merge-request-runner container
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300

    - name: Register runner
      ansible.builtin.command: gitlab-runner register --non-interactive --url {{ kubeinit_inventory_ci_gitlab_url }}/ --clone-url {{ kubeinit_inventory_ci_gitlab_url }} --registration-token {{ _result_registration_token.content | b64decode | trim }} --name kubeinit-merge-request-runner --executor shell --tag-list kubeinit-merge-request --output-limit 50000
      register: _result
      changed_when: "_result.rc == 0"

  vars:
    ansible_ssh_pipelining: False
  delegate_to: kubeinit-merge-request-runner

- block:
    - name: Add task-deploy-ci to tasks_completed
      ansible.builtin.add_host:
        name: "{{ kubeinit_facts_name }}"
        tasks_completed: "{{ kubeinit_facts_hostvars.tasks_completed | union(['task-deploy-ci']) }}"

    - name: Update kubeinit_facts_hostvars
      ansible.builtin.set_fact:
        kubeinit_facts_hostvars: "{{ hostvars[kubeinit_facts_name] }}"

    - block:
        - name: Stop after 'task-deploy-ci' when requested
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in kubeinit_facts_hostvars.tasks_completed
  tags: omit_from_grapher
