---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- block:
    - name: Gather kubeinit ci facts if needed
      ansible.builtin.include_tasks: gather_ci_facts.yml
      vars:
        facts_prepared: "{{ kubeinit_facts_name is defined }}"
      when: not facts_prepared

    - block:
        - name: "Stop before 'task-prepare-environment' when requested"
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_before_task is defined and kubeinit_stop_before_task == 'task-prepare-environment'
  tags: omit_from_grapher

- name: Define kubeinit_facts_hostvars
  ansible.builtin.set_fact:
    kubeinit_facts_hostvars: "{{ hostvars[kubeinit_facts_name] }}"

- name: Define ci fact names needed to prepare groups
  ansible.builtin.set_fact:
    kubeinit_ci_host_name:
      "{{ 'kubeinit-ci' if (('ci_host' not in groups) or ((groups['ci_host'] | list | length) == 0)) else groups['ci_host'][0] }}"

- name: Add a default entry for the first hypervisor if there are no ci_host members
  ansible.builtin.add_host:
    name: "{{ kubeinit_ci_host_name }}"
    group: ci_host
    target: "{{ groups['hypervisor_hosts'][0] }}"
  when: "('ci_host' not in groups) or ((groups['ci_host'] | list | length) == 0)"

- name: Add remote_user for ci_host
  ansible.builtin.add_host:
    name: "{{ kubeinit_ci_host_name }}"
    group: ci_host
    remote_user: "{{ kubeinit_facts_hostvars.remote_user }}"
    ansible_ssh_user: "{{ kubeinit_facts_hostvars.remote_user }}"
    ansible_ssh_extra_args: "-i ~/.ssh/id_{{ kubeinit_common_ssh_keytype }}"

- name: Add ansible_host for ci_host if not defined
  ansible.builtin.add_host:
    name: "{{ kubeinit_ci_host_name }}"
    group: ci_host
    ansible_host: "{{ hostvars[hostvars[kubeinit_ci_host_name].target].ansible_host }}"
  when: "hostvars[kubeinit_ci_host_name].ansible_host is not defined"

- name: Add target for ci_host if not defined
  ansible.builtin.add_host:
    name: "{{ kubeinit_ci_host_name }}"
    group: ci_host
    target: "{{ kubeinit_ci_host_name }}"
  when: "hostvars[kubeinit_ci_host_name].target is not defined"

- name: Check to see if we have access to ci_host
  ansible.builtin.ping:
  vars:
    ansible_ssh_user: "{{ hostvars[groups['ci_host'][0]].remote_user }}"
    ansible_ssh_extra_args: "-i ~/.ssh/id_{{ kubeinit_common_ssh_keytype }}"
  delegate_to: "{{ kubeinit_ci_host_name }}"

- name: Gather facts from ci_host
  ansible.builtin.include_tasks: gather_host_facts.yml
  vars:
    ansible_ssh_user: "{{ hostvars[groups['ci_host'][0]].remote_user }}"
    ansible_ssh_extra_args: "-i ~/.ssh/id_{{ kubeinit_common_ssh_keytype }}"
    _param_gather_host: "{{ kubeinit_ci_host_name }}"

- name: Define additional host facts
  ansible.builtin.set_fact:
    kubeinit_ci_host_fqdn: "{{ kubeinit_ci_host_name }}.{{ kubeinit_inventory_ci_domain }}"
    kubeinit_ci_host_address: "{{ hostvars[kubeinit_ci_host_name].ssh_connection_address }}"
    kubeinit_ci_host_user: "{{ kubeinit_facts_hostvars.remote_user }}"
    kubeinit_ci_keypair_path: "~/.ssh/kubeinit_ci_id_{{ kubeinit_common_ssh_keytype }}"
    kubeinit_ci_bridge_name: kubeinit-ci-bridge
    kubeinit_ci_pod_name: kubeinit-ci-pod

- name: Confirm presence of podman package
  ansible.builtin.package_facts:
  failed_when: "'podman' not in ansible_facts.packages"
  delegate_to: "{{ kubeinit_ci_host_name }}"
  when: ansible_check_mode

- name: Install podman package
  ansible.builtin.package:
    name:
      - podman
    state: present
  become: true
  become_user: root
  delegate_to: "{{ kubeinit_ci_host_name }}"
  when: not ansible_check_mode

- name: Gather hypervisor host facts
  ansible.builtin.include_tasks: gather_host_facts.yml
  loop: "{{ groups['hypervisor_hosts'] }}"
  loop_control:
    loop_var: _param_gather_host
  vars:
    ansible_ssh_extra_args: "-i ~/.ssh/id_{{ kubeinit_common_ssh_keytype }}"

- block:
    - name: Add task-prepare-environment to tasks_completed
      ansible.builtin.add_host:
        name: "{{ kubeinit_facts_name }}"
        tasks_completed: "{{ kubeinit_facts_hostvars.tasks_completed | union(['task-prepare-environment']) }}"

    - name: Update kubeinit_facts_hostvars
      ansible.builtin.set_fact:
        kubeinit_facts_hostvars: "{{ hostvars[kubeinit_facts_name] }}"

    - block:
        - name: Stop after 'task-prepare-environment' when requested
          ansible.builtin.add_host: name="{{ kubeinit_facts_name }}" playbook_terminated=true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in kubeinit_facts_hostvars.tasks_completed
  tags: omit_from_grapher
